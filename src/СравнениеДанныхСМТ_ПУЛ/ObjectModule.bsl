Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
// Функция формирует отчет
//
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, СтруктураНастроекСМТ = Неопределено) Экспорт
	
	//НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	//ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	//ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	//КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	НастройкаСКД        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ПараметрДатаНачала = НачалоНедели(ТекущаяДата())-60*60*24*7;
	ПараметрДатаОкончания = КонецДня(ТекущаяДата());
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода1"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода1"));
	ПараметрОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	
	
	
	ТЗДанныхПУЛ = ПолучитьТаблицуДанных(ПараметрНачалоПериода.Значение, ПараметрКонецПериода.Значение, ПараметрОрганизация.Значение, СтруктураНастроекСМТ);

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанныеПутевыелисты",ТЗДанныхПУЛ);
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаСКД);
		
КонецФункции

Функция ПолучитьТаблицуДанных(ДатаНачала, ДатаОкончания, Организация, СтруктураНастроекСМТ)
	
	Если СтруктураНастроекСМТ = Неопределено Тогда
		Предупреждение("Не удалось определить настройки системы мониторинга!");
		Возврат Новый ТаблицаЗначений;
	Иначе		
		АдресТелематическогоСервера = СтруктураНастроекСМТ.АдресТелематическогоСервера;
		ИдОтчетаДляПолученияДанных  = СтруктураНастроекСМТ.ИдОтчетаДляПолученияДанных;
		ИдШаблонаДляПолученияДанных = СтруктураНастроекСМТ.ИдШаблонаДляПолученияДанных;
		ИмяОтчетаДляПолученияДанных = СтруктураНастроекСМТ.ИмяОтчетаДляПолученияДанных;
		Логин 						= СтруктураНастроекСМТ.Логин;
		Пароль 						= СтруктураНастроекСМТ.Пароль;
		ПортТелематическогоСервера  = СтруктураНастроекСМТ.ПортТелематическогоСервера;
		ЧасовойПояс 				= СтруктураНастроекСМТ.ЧасовойПояс;
		ХранениеИдТехники           = СтруктураНастроекСМТ.ХранениеИдТехники;
		Токен          				= СтруктураНастроекСМТ.Токен;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НормаГСМИзПУЛ.Техника, ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)) КАК Техника,
		|	РасходГСМПоТехнике.СкладТехники КАК СкладТехника,
		|	РасходГСМПоТехнике.ТрактористВодитель,
		|	ЕСТЬNULL(НормаГСМИзПУЛ.РасходНорма, 0) КАК РасходГСМПоНорме1С,
		|	РасходГСМПоТехнике.РасходГСМПоФакту1С,
		|	ЕСТЬNULL(НормаГСМИзПУЛ.ИдТехники, 0) КАК ИдТехники
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ТоварыНаСкладах.Количество) КАК РасходГСМПоФакту1С,
		|		ТоварыНаСкладах.Склад КАК СкладТехники,
		|		ВЫБОР
		|			КОГДА цДокументы2Уровня.Регистратор ССЫЛКА Документ.цУчетныйЛистТрактористаМашиниста
		|				ТОГДА цДокументы2Уровня.Регистратор.Тракторист
		|			КОГДА цДокументы2Уровня.Регистратор ССЫЛКА Документ.цПутевойЛистГрузовогоАвтомобиля
		|				ТОГДА цДокументы2Уровня.Регистратор.Водитель
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОНЕЦ КАК ТрактористВодитель
		|	ИЗ
		|		РегистрСведений.цДокументы2Уровня КАК цДокументы2Уровня
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
		|			ПО цДокументы2Уровня.ТиповойДокумент = ТоварыНаСкладах.Регистратор
		|	ГДЕ
		|		ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ТоварыНаСкладах.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ТоварыНаСкладах.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТоварыНаСкладах.Склад,
		|		ВЫБОР
		|			КОГДА цДокументы2Уровня.Регистратор ССЫЛКА Документ.цУчетныйЛистТрактористаМашиниста
		|				ТОГДА цДокументы2Уровня.Регистратор.Тракторист
		|			КОГДА цДокументы2Уровня.Регистратор ССЫЛКА Документ.цПутевойЛистГрузовогоАвтомобиля
		|				ТОГДА цДокументы2Уровня.Регистратор.Водитель
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОНЕЦ) КАК РасходГСМПоТехнике
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(цПутевойЛистГрузовогоАвтомобиляВыработка.РасходГорючегоПоНорме) КАК РасходНорма,
		|			цСведенияОТехнике.Склад КАК СкладТехники,
		|			цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Автомобиль КАК Техника,
		|			цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Водитель КАК ТрактористВодитель,
		|			цСведенияОТехнике.ИдТехники КАК ИдТехники
		|		ИЗ
		|			Документ.цПутевойЛистГрузовогоАвтомобиля.Выработка КАК цПутевойЛистГрузовогоАвтомобиляВыработка
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.цСведенияОТехнике КАК цСведенияОТехнике
		|				ПО цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Автомобиль = цСведенияОТехнике.ОсновноеСредство
		|		ГДЕ
		|			цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|			И цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Проведен = ИСТИНА
		|			И цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			цСведенияОТехнике.Склад,
		|			цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Автомобиль,
		|			цПутевойЛистГрузовогоАвтомобиляВыработка.Ссылка.Водитель,
		|			цСведенияОТехнике.ИдТехники
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СУММА(цУчетныйЛистТрактористаМашинистаВыработка.РасходГорючегоНорма),
		|			цСведенияОТехнике.Склад,
		|			цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Трактор,
		|			цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Тракторист,
		|			цСведенияОТехнике.ИдТехники
		|		ИЗ
		|			Документ.цУчетныйЛистТрактористаМашиниста.Выработка КАК цУчетныйЛистТрактористаМашинистаВыработка
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.цСведенияОТехнике КАК цСведенияОТехнике
		|				ПО цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Трактор = цСведенияОТехнике.ОсновноеСредство
		|		ГДЕ
		|			цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|			И цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Проведен = ИСТИНА
		|			И цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			цСведенияОТехнике.Склад,
		|			цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Трактор,
		|			цУчетныйЛистТрактористаМашинистаВыработка.Ссылка.Тракторист,
		|			цСведенияОТехнике.ИдТехники) КАК НормаГСМИзПУЛ
		|		ПО РасходГСМПоТехнике.СкладТехники = НормаГСМИзПУЛ.СкладТехники
		|			И РасходГСМПоТехнике.ТрактористВодитель = НормаГСМИзПУЛ.ТрактористВодитель";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Свойство", ХранениеИдТехники);  
	
	РезультирующаяТЗ = Запрос.Выполнить().Выгрузить();
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2));	
	
	РезультирующаяТЗ.Колонки.Добавить("ОстатокНаНачалоСМТ",ОписаниеТиповЧисло);
	РезультирующаяТЗ.Колонки.Добавить("ЗаправакаПоПоказаниямСМТ",ОписаниеТиповЧисло);
	РезультирующаяТЗ.Колонки.Добавить("РасходГСМПоПоказателямСМТ",ОписаниеТиповЧисло);
	РезультирующаяТЗ.Колонки.Добавить("ОстатокНаКонецСМТ",ОписаниеТиповЧисло);
	РезультирующаяТЗ.Колонки.Добавить("СливТопливаПоСМТ",ОписаниеТиповЧисло);
	
	//Создадим подключение HTTP	
	
	СтруктураНастроек = рав_ОбщегоНазначенияПовтИспВиалон.ПолучитьНастройкиСМТДляПУЛ();
	
	АдресСервера = СтруктураНастроек.АдресСервераВиалон;
	Логин = СтруктураНастроек.ПользовательСервераВиалон;
	Пароль = СтруктураНастроек.ПарольСервераВиалон;
	СмещениеВремени = СтруктураНастроек.СмещениеВремени;
	
	HTTP =  Новый HTTPСоединение(АдресСервера,80,Логин,Пароль); 
	
	//получим sid	
	иТекстЗапроса = "/wialon/ajax.html?svc=core/login&params={""user"":""" + Логин + """,""password"":""" + Пароль + """}""";
	ЗапросКСерверу = Новый HTTPЗапрос(иТекстЗапроса);
	Ответ = HTTP.Получить(ЗапросКСерверу);
	ОтветСтрока = "";
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;	
	
	Если ОтветСтрока = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключиться к системе мониторинга";
		Сообщение.Сообщить();
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	СтрокаEid = Найти(ОтветСтрока,"""eid"":""");
	
	Если СтрокаEid > 0 Тогда
		SessionID = Сред(ОтветСтрока,СтрокаEid+7,32);
	КонецЕсли;
	
	//Установим часовой пояс, смещение времени и язык отчета
	СмещениеВремени = СтруктураНастроек.СмещениеВремени;
	СмещениеВремениСтрокой = СтрЗаменить(СокрЛП(СмещениеВремени),Символы.НПП,""); 
	
	часпоясТекстЗапроса = "/wialon/ajax.html?sid=" + SessionID + 
	"&svc=render/set_locale&params={""tzOffset"":" + СмещениеВремениСтрокой + ",""language"":""ru"",""flags"":""""}";
	
	//часпоясТекстЗапроса = "/wialon/ajax.html?sid=" + SessionID + 
	//		"&svc=render/set_locale&params={""tzOffset"":0,""language"":""ru"",""flags"":""""}";
	
	ЗапросКСерверу = Новый HTTPЗапрос(часпоясТекстЗапроса);
	Ответ = HTTP.Получить(ЗапросКСерверу);
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
		Если СокрЛП(ОтветСтрока) = "{}" Тогда
			//Сообщить("Смещение времени установлено");
		Иначе
			Сообщить("Ошибка при установке смещении времени");
		КонецЕсли;
	Иначе
		Сообщить("Ошибка при установке смещении времени");   		
	КонецЕсли;
	
	
	ИдОтчетаДляПолученияДанных = СтруктураНастроек.РесурсДляПУЛ.ИдРесурса;
	ИдШаблонаДляПолученияДанных = СтруктураНастроек.РесурсДляПУЛ.ИдШаблона;
	
	
	Для каждого Стр Из РезультирующаяТЗ Цикл 
		
		ИдТехники = Стр.ИдТехники;
		
		Если ИдТехники = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//получим даныне по какой-то технике  (текущая дата)  	
		техТекстЗапроса = "/wialon/ajax.html?sid=" + SessionID + 
		"&svc=report/exec_report&params={""reportResourceId"":13856467,""reportTemplateId"":4,""reportObjectId"":" + 
		СокрЛП(ИдТехники) + ",""reportObjectSecId"":0,""interval"":{""from"":0,""to"":1,""flags"":0x02}} """;
		//
		//за указанное время 
		ДатаНачалаСМТ = СокрЛП(СтрЗаменить(ДатаНачала + СмещениеВремени - Дата(1970,1,1,0,0,0),Символы.НПП,""));
		ДатаОкончанияСМТ = СокрЛП(СтрЗаменить(ДатаОкончания + СмещениеВремени - Дата(1970,1,1,0,0,0),Символы.НПП,""));
		техТекстЗапроса = "/wialon/ajax.html?sid=" + SessionID + 
		"&svc=report/exec_report&params={""reportResourceId"":"+ИдОтчетаДляПолученияДанных+",""reportTemplateId"":" + ИдШаблонаДляПолученияДанных + ",""reportObjectId"":" + 
		СокрЛП(ИдТехники) + ",""reportObjectSecId"":0,""interval"":{""from"":" + ДатаНачалаСМТ + 
		",""to"":" + ДатаОкончанияСМТ + ",""flags"":0x00}} """;
		
		ЗапросКСерверу = Новый HTTPЗапрос(техТекстЗапроса);
		Ответ = HTTP.Получить(ЗапросКСерверу);
		Если Ответ.КодСостояния = 200 Тогда
			ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если Найти(ОтветСтрока,"{""error"":7}") > 0 Тогда
			//Ошибка доступа, скорее всего id с другой СМТ
			Продолжить;
		КонецЕсли;
		
		ПроверитьВозвратСМТ(ОтветСтрока,"Ошибка при получении данных по технике "+СокрЛП(Стр.Техника));
		
		Результат = ОтветСтрока;  
		
		///////******************************РАБОТАЕТ ТОЛЬКО НА 8.3**********************************
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСтрока);
			ОбъектДанных = ПрочитатьJSON(ЧтениеJSON);
			
			Если ОбъектДанных.Свойство("reportResult") Тогда
				
				РезультатОтчета = ОбъектДанных["reportResult"];
				
				Если РезультатОтчета.Свойство("stats") Тогда
					
					СтатистикаОтчета = РезультатОтчета["stats"];
					
					//Обход массива
					Для Каждого ЭлМассива Из СтатистикаОтчета Цикл
						
						ПолеОтчета = ЭлМассива[0];
						ЗначениеОтчета = ЭлМассива[1];
						
						Если ПолеОтчета = "Нач. уровень" Тогда
							Стр.ОстатокНаНачалоСМТ = ЗначениеОтчета;
						ИначеЕсли ПолеОтчета = "Всего заправлено" Тогда
							Стр.ЗаправакаПоПоказаниямСМТ = ЗначениеОтчета;
						ИначеЕсли ПолеОтчета = "Потрачено по ДУТ" Тогда
							Стр.РасходГСМПоПоказателямСМТ = ЗначениеОтчета;
						ИначеЕсли ПолеОтчета = "Конеч. уровень" Тогда
							Стр.ОстатокНаКонецСМТ = ЗначениеОтчета;
						ИначеЕсли ПолеОтчета = "Всего топлива слито" Тогда
							Стр.СливТопливаПоСМТ = ЗначениеОтчета; 
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;   		
				
			КонецЕсли; 		
			
		
		////находим статистику и обрезаем ненужные данные  		
		//ПозицияСтатистики = Найти(Результат,"""stats"":");  		
		//Если ПозицияСтатистики > 0 Тогда
		//	СтрокаСтатистика = Прав(Результат,СтрДлина(Результат)-ПозицияСтатистики);  		
		//	ПозицияСледующегоОбъекта = Найти(СтрокаСтатистика,"{");		
		//	СтрокаСтатистика = Лев(СтрокаСтатистика,ПозицияСледующегоОбъекта);  		
		//КонецЕсли; 	
		//
		////1. Ищем поле "Нач. уровень" (12 символов)
		//Стр.ОстатокНаНачалоСМТ = ПолучитьЗначениеИзСтатистики(СтрокаСтатистика,"Нач. уровень",12);
		//
		////2. Ищем поле "Всего заправлено" (16 символов)
		//Стр.ЗаправакаПоПоказаниямСМТ = ПолучитьЗначениеИзСтатистики(СтрокаСтатистика,"Всего заправлено",16);
		//
		////3. Ищем поле "Потрачено по ДУТ"  (16 символов)
		//Стр.РасходГСМПоПоказателямСМТ = ПолучитьЗначениеИзСтатистики(СтрокаСтатистика,"Потрачено по ДУТ",16);
		//
		////4. Ищем поле "Конеч. уровень" (14 символов) 
		//Стр.ОстатокНаКонецСМТ = ПолучитьЗначениеИзСтатистики(СтрокаСтатистика,"Конеч. уровень",14);
		//
		////5. Ищем поле "Всего топлива слито"  (19 символов)
		//Стр.СливТопливаПоСМТ = ПолучитьЗначениеИзСтатистики(СтрокаСтатистика,"Всего топлива слито",19); 		
		
	КонецЦикла;
	
	
	Возврат РезультирующаяТЗ;
	
КонецФункции

Функция ПолучитьЗначениеИзСтатистики(ИсходнаяСтрока,СтрокаПоиска,ДлинаСтрокиПоиска)
	
	ВозвращаемоеЧисло = 0;
	
	НайденнаяПозиция = Найти(ИсходнаяСтрока,СтрокаПоиска);
	
	Если НайденнаяПозиция > 0 Тогда		
		ОбрезаннаяСтрока = Прав(ИсходнаяСтрока,СтрДлина(ИсходнаяСтрока) - НайденнаяПозиция - ДлинаСтрокиПоиска-2); //добавляем 2, чтобы исключить ковычку с запятйо (",)
		ПозКвадратнойСкобки = Найти(ОбрезаннаяСтрока,"]");
		ОбрезаннаяСтрока = Лев(ОбрезаннаяСтрока,ПозКвадратнойСкобки);
		
		МаскаЧисел = "0123456789.,";
		ЗначениеЧисло = "";
		Для Ит = 1 По СтрДлина(ОбрезаннаяСтрока) Цикл
			Если Найти(МаскаЧисел,Сред(ОбрезаннаяСтрока,Ит,1)) > 0 Тогда
				ЗначениеЧисло = ЗначениеЧисло + Сред(ОбрезаннаяСтрока,Ит,1);
			КонецЕсли;
		КонецЦикла;
		ВозвращаемоеЧисло = Число(ЗначениеЧисло);  
		
	КонецЕсли;  
	
	Возврат ВозвращаемоеЧисло;
		
КонецФункции

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПроверитьВозвратСМТ(ОтветСтрока,ПроверяемыйПараметр)
	
	Если Найти(ОтветСтрока,"error") > 0 Тогда
		ВызватьИсключение("Не удалось подключиться к системе мониторинга! "+ПроверяемыйПараметр);
	КонецЕсли;   	

КонецПроцедуры // ПроверитьВозвратСМТ()


// Сохраняет текущие настройки отчета
//
Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Применяет текущие настройки отчета
//
Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

// Получает текущие настройки отчета
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ПараметрОрганизация <> Неопределено Тогда
		ПараметрОрганизация.Использование = Истина;
	КонецЕсли;
	
	//СписокРазделовУчета = Новый СписокЗначений;
	//СписокРазделовУчета.Добавить(Перечисления.РазделыУчета.МПЗ);
	//СписокРазделовУчета.Добавить(Перечисления.РазделыУчета.ТоварыОтгруженные);
	//СписокРазделовУчета.Добавить(Перечисления.РазделыУчета.МатериалыВЭксплуатации);
	//
	//ПараметрРазделыУчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РазделыУчета"));
	//Если ПараметрРазделыУчета <> Неопределено Тогда
	//	ПараметрРазделыУчета.Значение = СписокРазделовУчета;
	//	ПараметрРазделыУчета.Использование = Истина;
	//КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()
Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
