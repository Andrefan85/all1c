
Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КонтрагентыНажатие(Элемент)   	
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMCorrespondent";
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	СписокУсловий.columnSet.Добавить("inn");
	СписокУсловий.columnSet.Добавить("kpp");
	Запрос.query = СписокУсловий;
	
	ТЗКорреспонденты = Новый ТаблицаЗначений;
	ТЗКорреспонденты.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка"));
	ТЗКорреспонденты.Колонки.Добавить("inn",Новый ОписаниеТипов("Строка"));
	ТЗКорреспонденты.Колонки.Добавить("kpp",Новый ОписаниеТипов("Строка"));
	ТЗКорреспонденты.Колонки.Добавить("name",Новый ОписаниеТипов("Строка"));   
	ТЗКорреспонденты.Колонки.Добавить("comment",Новый ОписаниеТипов("Строка")); 
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 1/3. Запрос к Web-сервису 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();	
	
	Результат = Прокси.execute(Запрос); 
	
	Индикатор.Закрыть();
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 2/3.Идет обработка полученных данных";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();  
	Ит = 0;
	КоличествоСтрокЗапроса = Результат.items.Количество();
	Для каждого _Элемент Из Результат.items Цикл
		Если _Элемент.object.inn <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("inn,kpp",СокрЛП(_Элемент.object.inn),СокрЛП(_Элемент.object.kpp));  
			МассивСтрок = ТЗКорреспонденты.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрокаТЗ = ТЗКорреспонденты.Добавить();
				НоваяСтрокаТЗ.GUID = СокрЛП(_Элемент.object.objectID.id);
				НоваяСтрокаТЗ.inn  = СокрЛП(_Элемент.object.inn);
				НоваяСтрокаТЗ.kpp  = СокрЛП(_Элемент.object.kpp);
				НоваяСтрокаТЗ.name = СокрЛП(_Элемент.object.name);         				
				НоваяСтрокаТЗ.comment = "";
				//Если _Элемент.object.kpp = Неопределено Тогда
				//	НоваяСтрокаТЗ.comment = "Нет КПП";
				//КонецЕсли;
			Иначе
				ТЗДублей = ТЗКорреспонденты.Скопировать(СтруктураОтбора);
				Для каждого СтрокаТЗ Из ТЗДублей Цикл
					_СтрокаТЗ = ТЗКорреспонденты.Найти(СтрокаТЗ.GUID,"GUID");
					Если _СтрокаТЗ <> Неопределено Тогда
						_СтрокаТЗ.comment = "Есть дубли ДО";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 		
		КонецЕсли; 
		Ит = Ит+1;
		Индикатор.Значение = Окр(100*Ит/КоличествоСтрокЗапроса,2);
	КонецЦикла;
	
	Индикатор.Закрыть();
	
	
	ТЗПустыеИНН = ПолучитьТаблицуПустыхКорреспондентов(Результат);
	
	СтруктураОтбора = Новый Структура("comment","");
	ТЗДляСвязи = ТЗКорреспонденты.Скопировать(СтруктураОтбора);
	
	МВТ = Новый МенеджерВременныхТаблиц;
	ЗапросКорреспонденты = Новый Запрос;
	ЗапросКорреспонденты.МенеджерВременныхТаблиц = МВТ;
	
	ЗапросКорреспонденты.Текст = "ВЫБРАТЬ
	|	ТЗК.GUID,
	|	ВЫРАЗИТЬ(ТЗК.inn КАК СТРОКА(12)) КАК inn,
	|	ВЫРАЗИТЬ(ТЗК.kpp КАК СТРОКА(9)) КАК kpp,
	|	ВЫРАЗИТЬ(ТЗК.name КАК СТРОКА(100)) КАК name
	|ПОМЕСТИТЬ ВТ_Корр
	|ИЗ
	|	&ТЗКорреспонденты КАК ТЗК";
	
	ЗапросКорреспонденты.УстановитьПараметр("ТЗКорреспонденты", ТЗДляСвязи);
	РезультатЗапроса = ЗапросКорреспонденты.Выполнить();
	
	ЗапросКорреспонденты.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Корреспонденты.GUID,
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности КАК ИНН,
	|	ВТ_Корреспонденты.name
	|ИЗ
	|	ВТ_Корр КАК ВТ_Корреспонденты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_Корреспонденты.inn = Контрагенты.ИдентификационныйКодЛичности
	|ГДЕ
	|	Контрагенты.ИдентификационныйКодЛичности <> """"        //будем пытаться найти еще и по наименованию
//	|	И Контрагенты.КПП <> """"     //закооментим, пусть ищутся ИП-шники без КПП
	|	И НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.Ссылка В
	|				(ВЫБРАТЬ
	|					ОбъектыДокументооборота_РАВ.Объект
	|				ИЗ
	|					РегистрСведений.ОбъектыДокументооборота_РАВ КАК ОбъектыДокументооборота_РАВ)
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.Наименование";
	
	
	
	РезультатЗапроса = ЗапросКорреспонденты.Выполнить();
	
	ТЗКорректныеКорреспонденты = РезультатЗапроса.Выгрузить();
	
	//дубли в УПП
	МассивИНН = ТЗКорректныеКорреспонденты.ВыгрузитьКолонку("ИНН"); 
	ТЗДублиУПП = ПолучитьДублиУПП(МассивИНН);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Тип = "DMCorrespondent"; 
	//ТЗ = ЗапросКорреспонденты.Выполнить().Выгрузить();
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("РеестрКонтрагентов");
	
	//шапка макета
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "Связанные контрагенты";
	Область.Параметры.Ит = ТЗКорректныеКорреспонденты.Количество() - ТЗДублиУПП.Количество();   
	ТабДок.Вывести(Область);
	
	//шапка таблицы
	Область = Макет.ПолучитьОбласть("ШапкаТаблицыСвязанные");
	ТабДок.Вывести(Область);
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 3/3.Создание связи с объектами 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();
	
	Индикатор.МаксимальноеЗначение = 100;
	НомерСтроки = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИнтегрированныйОбъект = ВыборкаДетальныеЗаписи.Ссылка; 
		Если ТЗДублиУПП.Найти(ИнтегрированныйОбъект,"Ссылка") = Неопределено Тогда//проверяем, что в УПП нет дублей контрагентов
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязь(ВыборкаДетальныеЗаписи.GUID, Тип, ИнтегрированныйОбъект);
			НаборЗаписей = РегистрыСведений.ОбъектыДокументооборота_РАВ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ИнтегрированныйОбъект);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			ЗаписьРег = НаборЗаписей.Добавить();
			ЗаписьРег.Объект = ИнтегрированныйОбъект;
			ЗаписьРег.ЕстьСвязь = Истина;
			//для контрагентов не проверяем наличие файлов дабы не перегружать обработку
			ЗаписьРег.ЕстьФайлы = Ложь;
			ЗаписьРег.УидДО = ВыборкаДетальныеЗаписи.GUID;
			ЗаписьРег.УидИС = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
			ЗаписьРег.ИмяДО = ВыборкаДетальныеЗаписи.name;      		
			ЗаписьРег.ТипОбъектаДО = "DMCorrespondent"; 
			ЗаписьРег.Комментарий = "Связь создана обработкой "+Строка(ТекущаяДата())+" "+глЗначениеПеременной("глТекущийПользователь");
			НаборЗаписей.Записать();
			//строка таблицы макета
			НомерСтроки = НомерСтроки+1;
			Область = Макет.ПолучитьОбласть("СтрокаСвязанные");
			Область.Параметры.НомерСтроки = НомерСтроки;
			Область.Параметры.Код = ВыборкаДетальныеЗаписи.Ссылка.Код;
			Область.Параметры.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
			Область.Параметры.Корреспондент = СокрЛП(ВыборкаДетальныеЗаписи.name);
			Область.Параметры.ИНН = ВыборкаДетальныеЗаписи.ИНН;
			//Область.Параметры.КПП = ВыборкаДетальныеЗаписи.КПП;
			Область.Параметры.ДатаСвязи = ТекущаяДата(); 		
			ТабДок.Вывести(Область);
			Индикатор.Значение = Окр(100*НомерСтроки/ВыборкаДетальныеЗаписи.Количество(),2);
		КонецЕсли;
	КонецЦикла;
	
	Индикатор.Закрыть();
	
	//дубли в ДО
	СтруктураОтбора = Новый Структура("comment","Есть дубли ДО");
	ТЗОшибки = ТЗКорреспонденты.Скопировать(СтруктураОтбора);
	
	//шапка макета
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "Не удалось найти связь (найдено более 1 совпадения)";
	Область.Параметры.Ит = ТЗОшибки.Количество()+ТЗДублиУПП.Количество();
	ТабДок.Вывести(Область);
	
	//шапка таблицы
	Область = Макет.ПолучитьОбласть("ШапкаТаблицыОшибки");
	ТабДок.Вывести(Область);
	НомерСтроки = 0;
	
	НомерСтроки = 0;
	Для каждого Стр ИЗ ТЗОшибки Цикл
		//строка таблицы макета
		НомерСтроки = НомерСтроки+1;
		Область = Макет.ПолучитьОбласть("СтрокаОшибки");
		Область.Параметры.НомерСтроки = НомерСтроки;
		Область.Параметры.Корреспондент = Стр.name;
		Область.Параметры.ИНН = Стр.inn;
		//Область.Параметры.КПП = Стр.kpp;
		Область.Параметры.Комментарий = "Есть дубли в Документооборот"; 		
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	//выводим дубли на строне УПП
	Если ТЗДублиУПП.Количество()>0 Тогда
		Для каждого Стр Из ТЗДублиУПП Цикл
			НомерСтроки = НомерСтроки+1;	
			Область = Макет.ПолучитьОбласть("СтрокаОшибки");
			Область.Параметры.НомерСтроки = НомерСтроки;
			Область.Параметры.Корреспондент = Стр.Ссылка;
			Область.Параметры.ИНН = Стр.ИНН;
			//Область.Параметры.КПП = Стр.КПП;
			Область.Параметры.Комментарий = "Есть дубли в Интегрированной системе"; 		
			ТабДок.Вывести(Область);		
		КонецЦикла;		
	КонецЕсли;	
	
	МВТ.Закрыть();
	
	Если ТЗПустыеИНН.Количество() > 0 Тогда
		
		//шапка макета
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.ТекстЗаголовка = "Отсутствует ИНН у Корреспондента в 1С: ДО";
		Область.Параметры.Ит = ТЗПустыеИНН.Количество();
		ТабДок.Вывести(Область);
		
		//шапка таблицы
		Область = Макет.ПолучитьОбласть("ШапкаТаблицыПустыеИНН");
		ТабДок.Вывести(Область);
		НомерСтроки = 0;
		
		Для каждого Стр ИЗ ТЗПустыеИНН Цикл
			//строка таблицы макета
			НомерСтроки = НомерСтроки+1;
			Область = Макет.ПолучитьОбласть("СтрокаПустыеИНН");
			Область.Параметры.НомерСтроки = НомерСтроки;
			Область.Параметры.Корреспондент = Стр.name;
			ТабДок.Вывести(Область);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДок.Показать();
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;    	
	
КонецПроцедуры

Функция ПолучитьТаблицуПустыхКорреспондентов(Результат)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("inn",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("kpp",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("name",Новый ОписаниеТипов("Строка"));   
	ТЗ.Колонки.Добавить("comment",Новый ОписаниеТипов("Строка"));  	
	Для каждого _Элемент Из Результат.items Цикл
		Если _Элемент.object.inn = Неопределено Тогда
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.GUID = СокрЛП(_Элемент.object.objectID.id);
			НоваяСтрокаТЗ.inn  = "";
			НоваяСтрокаТЗ.kpp  = "";
			НоваяСтрокаТЗ.name = СокрЛП(_Элемент.object.name);
			НоваяСтрокаТЗ.comment = "";
		КонецЕсли;   	
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции


Процедура ОчиститьСвязьКонтрагентыНажатие(Элемент)
	
	ОчиститьСвязь("Справочник.Контрагенты","DMCorrespondent","контрагентов"); 
	
КонецПроцедуры

Процедура ОчиститьСвязь(ТипОбъектаУПП,ТипXDTO,ТекстИндикатора)
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Индикатор.НаименованиеОбработкиДанных = "Удаление связей "+ТекстИндикатора+" с объектами 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();
	
	Индикатор.МаксимальноеЗначение = 100;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ОбъектыДокументооборота_РАВ.Объект,
	|	ОбъектыДокументооборота_РАВ.ЕстьСвязь,
	|	ОбъектыДокументооборота_РАВ.ЕстьФайлы,
	|	ОбъектыДокументооборота_РАВ.УидИС,
	|	ОбъектыДокументооборота_РАВ.УидДО,
	|	ОбъектыДокументооборота_РАВ.Комментарий
	|ИЗ
	|	РегистрСведений.ОбъектыДокументооборота_РАВ КАК ОбъектыДокументооборота_РАВ            
	|ГДЕ
	|	ОбъектыДокументооборота_РАВ.Комментарий ПОДОБНО &Комментарий";
	
	Запрос.Текст = Запрос.Текст + " И ОбъектыДокументооборота_РАВ.Объект ССЫЛКА "+ТипОбъектаУПП;   	
	
	Запрос.УстановитьПараметр("Комментарий", "%обработкой%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Индикатор.Закрыть();
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоСтрокЗапроса = ВыборкаДетальныеЗаписи.Количество();
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Ит = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипXDTO = "DMInternalDocument"  Тогда
			ЕстьОбъектВДО = рав_Документооборот.ПроверитьЕстьЛиОбъектВДО(ВыборкаДетальныеЗаписи.УидДО);   //проверим на всякий случай, есть ли объект в ДО
			Если ЕстьОбъектВДО Тогда  			
				ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязь(ВыборкаДетальныеЗаписи.УидДО, ТипXDTO, ВыборкаДетальныеЗаписи.Объект); 
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ОбъектыДокументооборота_РАВ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(); 
		
		//очистим типовой регистр тоже
		ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязь(ВыборкаДетальныеЗаписи.УидДО,ТипXDTO, ВыборкаДетальныеЗаписи.Объект);
		
		Ит = Ит+1;
		Индикатор.Значение = Окр(100*Ит/КоличествоСтрокЗапроса,2);
		
	КонецЦикла; 
	     	
	МассивОбъектов = ТЗ.ВыгрузитьКолонку("Объект");
	
	Индикатор.Закрыть();
	
КонецПроцедуры



Процедура ДоговорыКонтрагентовНажатие(Элемент)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMInternalDocument";
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	СписокУсловий.columnSet.Добавить("regNumber");  
	СписокУсловий.columnSet.Добавить("regDate");
	СписокУсловий.columnSet.Добавить("correspondent");
	Запрос.query = СписокУсловий;
	
	ТЗДоговоры = Новый ТаблицаЗначений;
	ТЗДоговоры.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка"));
	ТЗДоговоры.Колонки.Добавить("regNumber",Новый ОписаниеТипов("Строка"));
	ТЗДоговоры.Колонки.Добавить("regNumberOriginal",Новый ОписаниеТипов("Строка"));
	ТЗДоговоры.Колонки.Добавить("regDate",Новый ОписаниеТипов("Дата"));
	ТЗДоговоры.Колонки.Добавить("name",Новый ОписаниеТипов("Строка"));   
	ТЗДоговоры.Колонки.Добавить("corrname",Новый ОписаниеТипов("Строка"));   
	ТЗДоговоры.Колонки.Добавить("correspondent",Новый ОписаниеТипов("СправочникСсылка.Контрагенты")); 
	ТЗДоговоры.Колонки.Добавить("comment",Новый ОписаниеТипов("Строка")); 
	
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 1/4. Запрос к Web-сервису 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();	
	
	Результат = Прокси.execute(Запрос); 
	
	Индикатор.Закрыть();  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДокументооборота_РАВ.УидДО,
	|	ОбъектыДокументооборота_РАВ.Объект
	|ИЗ
	|	РегистрСведений.ОбъектыДокументооборота_РАВ КАК ОбъектыДокументооборота_РАВ";
	
	ТЗОбъектыСУИДамиДО = Запрос.Выполнить().Выгрузить();
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 2/4.Идет обработка полученных данных";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";   
	
	Индикатор.Открыть(); 
	
	Ит = 0;
	КоличествоСтрокЗапроса = Результат.items.Количество();
	Для каждого _Элемент Из Результат.items Цикл
		Если ЗначениеЗаполнено(_Элемент.object.regNumber) И ЗначениеЗаполнено(_Элемент.object.regDate) И ТипЗнч(_Элемент.object.correspondent) = Тип("ОбъектXDTO") Тогда  
			IDcorrespondent = СокрЛП(_Элемент.object.correspondent.objectID.id);  
			СтрТЗ = ТЗОбъектыСУИДамиДО.Найти(IDcorrespondent,"УидДО");
			Если СтрТЗ <> Неопределено Тогда
				//КлючУникальности = Новый УникальныйИдентификатор(IDcorrespondent);
				//НоваяСтрокаТЗ.correspondent = Справочники.Контрагенты.ПолучитьСсылку(КлючУникальности);
				//убираем все символы у номеров кроме русских и английских букв и цифр
				НоваяСтрокаТЗ = ТЗДоговоры.Добавить();
				НоваяСтрокаТЗ.GUID = СокрЛП(_Элемент.object.objectID.id);
				//НоваяСтрокаТЗ.regNumber  = СокрЛП(_Элемент.object.regNumber);
				НоваяСтрокаТЗ.regNumber  = РегВырСтрЗаменить(_Элемент.object.regNumber,"[^0-9А-Яа-я]","");
				НоваяСтрокаТЗ.regNumberOriginal  = _Элемент.object.regNumber;
				НоваяСтрокаТЗ.regDate  = НачалоДня(_Элемент.object.regDate);
				НоваяСтрокаТЗ.name = СокрЛП(_Элемент.object.name);
				НоваяСтрокаТЗ.corrname = СокрЛП(_Элемент.object.correspondent.objectID.presentation); 
				IDcorrespondent = СокрЛП(_Элемент.object.correspondent.objectID.id);  	
				НоваяСтрокаТЗ.correspondent = СтрТЗ.Объект;
				НоваяСтрокаТЗ.comment = "";  
			КонецЕсли;
		КонецЕсли;
		Ит = Ит+1;
		Индикатор.Значение = Окр(100*Ит/КоличествоСтрокЗапроса,2);
	КонецЦикла;
	
	Индикатор.Закрыть();
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Владелец,
	|	выразить(ДоговорыКонтрагентов.НомерДоговора как строка(30)) как номер,
	|	ДоговорыКонтрагентов.ДатаДоговора КАК Дата
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.НомерДоговора ЕСТЬ НЕ NULL 
	|	И ДоговорыКонтрагентов.НомерДоговора <> """"";
	
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 3/4. Преобразование номеров документов для связи";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";  
	
	Индикатор.Открыть();
	Ит = 0;
	
	ТЗДоговорыУПП = Запрос.Выполнить().Выгрузить();
	ТЗДоговорыУПП.Колонки.Добавить("НомерОригинал",Новый ОписаниеТипов("Строка"));
	Для каждого Стр Из ТЗДоговорыУПП Цикл
		Стр.Дата = НачалоДня(Стр.Дата);
		Стр.НомерОригинал = Стр.Номер;
		Стр.Номер = РегВырСтрЗаменить(Стр.Номер,"[^0-9А-Яа-я]","");
		ит = Ит + 1;
		Индикатор.Значение = Окр(100*Ит/ТЗДоговорыУПП.Количество(),2);
	КонецЦикла;
	
	Индикатор.Закрыть();
	
	МВТ = Новый МенеджерВременныхТаблиц;
	ЗапросДоговоры = Новый Запрос;
	ЗапросДоговоры.УстановитьПараметр("ТЗ",ТЗДоговорыУПП);
	ЗапросДоговоры.УстановитьПараметр("ТЗДоговоры", ТЗДоговоры);
	ЗапросДоговоры.Текст = "Выбрать ТЗ.Ссылка, ТЗ.Владелец, ТЗ.Номер, ТЗ.НомерОригинал, ТЗ.Дата поместить ВТДоговоры ИЗ  &ТЗ КАК ТЗ";
	ЗапросДоговоры.МенеджерВременныхТаблиц  = МВТ; 	               
	ЗапросДоговоры.Выполнить();
	
	ЗапросДоговоры.Текст = "ВЫБРАТЬ
	|	ТЗД.GUID,
	|	ВЫРАЗИТЬ(ТЗД.regNumber КАК СТРОКА(30)) КАК regNumber,
	|	ВЫРАЗИТЬ(ТЗД.regNumberOriginal КАК СТРОКА(30)) КАК regNumberOriginal,
	|	ВЫРАЗИТЬ(ТЗД.regDate КАК ДАТА) КАК regDate,
	|	ВЫРАЗИТЬ(ТЗД.name КАК Строка(150)) КАК name,
	|	ВЫРАЗИТЬ(ТЗД.correspondent КАК Справочник.Контрагенты) КАК correspondent
	|ПОМЕСТИТЬ ВТ_ДО
	|ИЗ
	|	&ТЗДоговоры КАК ТЗД";
	ЗапросДоговоры.Выполнить();
	
	
	ЗапросДоговоры.Текст = "ВЫБРАТЬ
	|	ВТ_ДО.GUID,
	|	ВТ_ДО.regNumber,
	|	ВТ_ДО.regNumberOriginal,
	|	ВТ_ДО.name,
	|	ВТДоговоры.Номер,
	|	ВТДоговоры.НомерОригинал,
	|	ВТ_ДО.regDate,
	|	ВТДоговоры.Дата,
	|	ВТДоговоры.Ссылка,
	|	ВТ_ДО.correspondent
	|ИЗ
	|	ВТ_ДО КАК ВТ_ДО Внутреннее соединение  ВТДоговоры КАК ВТДоговоры
	|По ВТ_ДО.regNumber = ВТДоговоры.Номер 
	|И ВТ_ДО.regDate = ВТДоговоры.Дата 
	|И ВТ_ДО.correspondent = ВТДоговоры.Владелец
	|ГДЕ ВТ_ДО.correspondent В (Выбрать РС.Объект ИЗ РегистрСведений.ОбъектыДокументооборота_РАВ КАК РС)
	|И НЕ ВТДоговоры.Ссылка В (Выбрать РС.Объект ИЗ РегистрСведений.ОбъектыДокументооборота_РАВ КАК РС)";  
	
	РезультатЗапроса = ЗапросДоговоры.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	ТЗ.Колонки.Добавить("comment", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Стр ИЗ ТЗ Цикл
		//сначала проверим дубли в ДО
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка",Стр.Ссылка);
		ПараметрыОтбора.Вставить("regNumber",Стр.regNumber);
		ПараметрыОтбора.Вставить("regDate",Стр.regDate);
		Массив =  ТЗ.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество()>1 Тогда 
			Стр.comment = "Есть дубли в ДО";	
		КонецЕсли;		
		//теперь в УПП
		ПараметрыОтбора.Удалить("ссылка");
		ПараметрыОтбора.Вставить("name",Стр.name);
		Массив = ТЗ.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество()>1 Тогда
			Стр.comment = "Есть дубли в УПП";	
		КонецЕсли;		
	КонецЦикла;
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("РеестрДоговоров");
	//шапка макета
	СтруктураОтбора = Новый Структура("comment","");
	ТЗ_ДляСвязей = ТЗ.Скопировать(СтруктураОтбора);
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "Связанные договора";
	Область.Параметры.Ит = ТЗ_ДляСвязей.Количество();
	
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ШапкаТаблицыСвязанные");
	ТабДок.Вывести(Область);
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 4/4. Создание связи с объектами 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();        	
	
	КоличествоСтрокЗапроса =  ВыборкаДетальныеЗаписи.Количество();
	
	
	Тип = "DMInternalDocument"; 
	НСтр = 0;
	Для Каждого Стр ИЗ ТЗ_ДляСвязей Цикл
		ИнтегрированныйОбъект = Стр.Ссылка; 
		ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязь(Стр.GUID, Тип, ИнтегрированныйОбъект);
		НаборЗаписей = РегистрыСведений.ОбъектыДокументооборота_РАВ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ИнтегрированныйОбъект);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		ЗаписьРег = НаборЗаписей.Добавить();
		ЗаписьРег.Объект = ИнтегрированныйОбъект;
		ЗаписьРег.ЕстьСвязь = Истина;
		ФайлыXDTO = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(Стр.GUID,Стр.name,Тип);  
		КоличествоФайлов = ФайлыXDTO.files.Количество();
		ЗаписьРег.ЕстьФайлы = КоличествоФайлов > 0;

		ЗаписьРег.УидДО = Стр.GUID;
		ЗаписьРег.УидИС = Стр.Ссылка.УникальныйИдентификатор();
		ЗаписьРег.ИмяДО = Стр.name;      		
		ЗаписьРег.ТипОбъектаДО = "DMInternalDocument"; 
		
		СогласованУтвержден = рав_Документооборот.ОбновитьДанныеПоБизнесПроцессам(Стр.GUID,"DMInternalDocument",Прокси);
		Если СогласованУтвержден.Свойство("Согласован") И  СогласованУтвержден.Свойство("Утвержден") И СогласованУтвержден.Свойство("Отклонен") Тогда
			ЗаписьРег.Согласован = СогласованУтвержден.Согласован;
			ЗаписьРег.Утвержден  = СогласованУтвержден.Утвержден;
			ЗаписьРег.Отклонен  = СогласованУтвержден.Отклонен;
		КонецЕсли;
		
		ЗаписьРег.Комментарий = "Связь создана обработкой "+Строка(ТекущаяДата())+" "+глЗначениеПеременной("глТекущийПользователь");
		НаборЗаписей.Записать();
		
		Нстр = Нстр+1;
		Область = Макет.ПолучитьОбласть("СтрокаСвязанные");
		Область.Параметры.НомерСтроки = Нстр;
		Область.Параметры.Контрагент = Стр.Ссылка.Владелец;
		Область.Параметры.Договор = Стр.Ссылка;
		Область.Параметры.Организация = Стр.Ссылка.Организация;
		Область.Параметры.НомерДоговора = Стр.Ссылка.Номер;
		Область.Параметры.ДатаДоговора = Формат(Стр.Ссылка.Дата,"ДЛФ=Д");
		Область.Параметры.ДатаСвязи = ТекущаяДата();
		ТабДок.Вывести(Область);
		Индикатор.Значение = Окр(100*НСтр/КоличествоСтрокЗапроса,2);
	КонецЦикла;
	
	Индикатор.Закрыть();
	
	//Выводим секцию с дублями
	СтруктураОтбораДО = Новый Структура("comment","Есть дубли в ДО");
	ТЗ_ОшибкиДО = ТЗ.Скопировать(СтруктураОтбораДО);
	ТЗ_ОшибкиДО.Сортировать("correspondent");
	
	СтруктураОтбораУПП = Новый Структура("comment","Есть дубли в УПП");
	ТЗ_ОшибкиУПП = ТЗ.Скопировать(СтруктураОтбораУПП);
	ТЗ_ОшибкиУПП.Сортировать("correspondent");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "Ошибки, связанные с дублями договоров";
	Область.Параметры.ит = ТЗ_ОшибкиДО.Количество()+ ТЗ_ОшибкиУПП.Количество();
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ШапкаТаблицыОшибки");
	ТабДок.Вывести(Область);
	НСтр = 0;
	Для Каждого Стр Из ТЗ_ОшибкиДО Цикл 
		Нстр = Нстр+1;
		Область = Макет.ПолучитьОбласть("СтрокаОшибки");
		Область.Параметры.НомерСтроки = Нстр;
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Организация = Стр.Ссылка.Организация;
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Для Каждого Стр Из ТЗ_ОшибкиУПП Цикл
		Нстр = Нстр+1;
		Область = Макет.ПолучитьОбласть("СтрокаОшибки");
		Область.Параметры.НомерСтроки = Нстр;
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Организация = Стр.Ссылка.Организация;
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	
	ТабДок.Показать();
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры 

Процедура ОчиститьСвязьДоговорыНажатие(Элемент)
	
	ОчиститьСвязь("Справочник.ДоговорыКонтрагентов","DMInternalDocument","договоров контрагентов");
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Попытка
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		ЕстьДоступ = Истина;
	Исключение
		ЕстьДоступ = Ложь;	
	КонецПопытки;
	
	Если  ЕстьДоступ Тогда
		ЭлементыФормы.ЕстьДоступКартинка.Картинка = БиблиотекаКартинок.ЗеленаяГалка;
	Иначе
		ЭлементыФормы.ЕстьДоступКартинка.Картинка = БиблиотекаКартинок.Удалить;
		ЭлементыФормы.ЕстьДоступДО.Заголовок = "Не установлена связь с 1С: Документооборот";
		Для Каждого Эл Из ЭлементыФормы Цикл
			Если НЕ Найти("ЕстьДоступКартинка,ЕстьДоступДО,ОсновныеДействияФормыЗакрыть", Эл.Имя ) Тогда
				Эл.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСвязьВидыВзаиморасчетовНажатие(Элемент)
	
	ТипОбъектаДО = "DMInternalDocumentType";
	
	//проверим, есть ли ерархия и какая она
	Если Метаданные.Справочники.ВидыВзаиморасчетов.Иерархический Тогда
		Если Метаданные.Справочники.ВидыВзаиморасчетов.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			ЕстьИерархияГруппИЭлементов = Истина; //ищем по ключу Элемент+Родитель
		Иначе
			ЕстьИерархияГруппИЭлементов = Ложь;
		КонецЕсли;
	Иначе
		ЕстьИерархияГруппИЭлементов = Ложь;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = ТипОбъектаДО;
	
	ТЗВидыДоговоров = Новый ТаблицаЗначений;
	ТЗВидыДоговоров.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка"));
	ТЗВидыДоговоров.Колонки.Добавить("name",Новый ОписаниеТипов("Строка"));  
	ТЗВидыДоговоров.Колонки.Добавить("parent",Новый ОписаниеТипов("Строка"));  
	//rav+ dmil_1_0_4_6 08/10/14 не получилось получить реквизиты справочника ВидыВнутреннихДокументов в текущей версии ВебСервиса
	//ТЗВидыДоговоров.Колонки.Добавить("correspondentEnabled",Новый ОписаниеТипов("Булево"));
	//ТЗВидыДоговоров.Колонки.Добавить("durationEnabled",Новый ОписаниеТипов("Булево"));
	//ТЗВидыДоговоров.Колонки.Добавить("sumEnabled",Новый ОписаниеТипов("Булево")); 
	//rav-
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 1/3. Запрос к Web-сервису 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();	
	
	Результат = Прокси.execute(Запрос); 
	
	Индикатор.Закрыть();
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 2/3.Идет обработка полученных данных";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть(); 	
	
	Ит = 0;
	КоличествоСтрокЗапроса = Результат.items.Количество();
	Для каждого _Элемент Из Результат.items Цикл 
		Если НЕ _Элемент.isFolder Тогда
			НоваяСтрокаТЗ = ТЗВидыДоговоров.Добавить();
			НоваяСтрокаТЗ.GUID = СокрЛП(_Элемент.object.objectID.id);
			НоваяСтрокаТЗ.name = СокрЛП(_Элемент.object.name);
			НоваяСтрокаТЗ.parent = СокрЛП(_Элемент.parentID.presentation);
			Ит = Ит+1;
			Индикатор.Значение = Окр(100*Ит/КоличествоСтрокЗапроса,2);
		КонецЕсли;  	
	КонецЦикла;  
	
	ТЗВидыДоговоров.Сортировать("parent,name");
	
	Индикатор.Закрыть();
	
	МВТ = Новый МенеджерВременныхТаблиц;
	ЗапросВидыДоговоров = Новый Запрос;
	ЗапросВидыДоговоров.МенеджерВременныхТаблиц = МВТ;
	
	ЗапросВидыДоговоров.Текст = "ВЫБРАТЬ
	|	ТЗ.GUID,
	|	ВЫРАЗИТЬ(ТЗ.name КАК СТРОКА(100)) КАК name,
	|	ВЫРАЗИТЬ(ТЗ.parent КАК СТРОКА(100)) КАК parent
	|ПОМЕСТИТЬ ВТ_ВидыДог
	|ИЗ
	|	&ТЗВидыДоговоров КАК ТЗ";
	
	ЗапросВидыДоговоров.УстановитьПараметр("ТЗВидыДоговоров", ТЗВидыДоговоров);
	РезультатЗапроса = ЗапросВидыДоговоров.Выполнить();
	
	ЗапросВидыДоговоров.Текст = ПолучитьТекстЗапросаВидыВзаиморасчетов(ЕстьИерархияГруппИЭлементов);
	
	РезультатЗапроса = ЗапросВидыДоговоров.Выполнить();
	
	ТЗКорректныеВидыДоговоров = РезультатЗапроса.Выгрузить();
	
	МВТ.Закрыть();
	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента1;
	ТабДок1 = Новый ТабличныйДокумент;
	//Новый ТабличныйД
	Макет = ПолучитьМакет("РеестрВидыВзаиморасчетов");
	
	//заголовок макета
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "фываыва           Связанные Виды взаиморасчетов                фывфыва";
	Область.Параметры.Ит = ТЗКорректныеВидыДоговоров.Количество();   
	ТабДок.Вывести(Область);
	ТабДок1.Вывести(Область);
	
	//шапка таблицы связанные
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапка.Параметры.ВидВзаиморасчетовШапка = "ываываывав       Вид взаиморасчета  фывафываываываываыва";
	ТабДок.Вывести(ОбластьШапка);
	ТабДок1.Вывести(ОбластьШапка);
	
	Индикатор.НаименованиеОбработкиДанных = "Этап 3/3.Создание связи с объектами 1С:Документооборот";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();
	
	СписокСвязанныхОбъектовДО = Новый СписокЗначений;
	СЗДубли = Новый СписокЗначений;
	НомерСтроки = 0;
	Для каждого Стр Из ТЗКорректныеВидыДоговоров Цикл
		СтруктураОтбора = Новый Структура("name",Стр.name);
		Если ЕстьИерархияГруппИЭлементов Тогда
			СтруктураОтбора.Вставить("parent",Стр.parent);			
		КонецЕсли;
		МассивДублей = ТЗКорректныеВидыДоговоров.НайтиСтроки(СтруктураОтбора);
		Если МассивДублей.Количество() = 1 Тогда
			ИнтегрированныйОбъект = Стр.Ссылка;
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязь(Стр.GUID, ТипОбъектаДО, Стр.Ссылка);
			НаборЗаписей = РегистрыСведений.ОбъектыДокументооборота_РАВ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ИнтегрированныйОбъект);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			ЗаписьРег = НаборЗаписей.Добавить();
			ЗаписьРег.Объект = ИнтегрированныйОбъект;
			ЗаписьРег.ЕстьСвязь = Истина;
			ЗаписьРег.УидДО = Стр.GUID;
			ЗаписьРег.УидИС = Стр.Ссылка.УникальныйИдентификатор();
			ЗаписьРег.ИмяДО = Стр.name;      		
			ЗаписьРег.ТипОбъектаДО = ТипОбъектаДО; 
			ЗаписьРег.Комментарий = "Связь создана обработкой "+Строка(ТекущаяДата())+" "+глЗначениеПеременной("глТекущийПользователь");
			НаборЗаписей.Записать();
			//строка таблицы макета
			НомерСтроки = НомерСтроки+1;		
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.ВидВзаиморасчетов = СокрЛП(Стр.Наименование);
			ОбластьСтрока.Параметры.Папка = ?(ЕстьИерархияГруппИЭлементов,СокрЛП(Стр.parent),"");
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 		
			ТабДок.Вывести(ОбластьСтрока); 
			ТабДок1.Вывести(ОбластьСтрока); 
			Индикатор.Значение = Окр(100*НомерСтроки/ТЗКорректныеВидыДоговоров.Количество(),2);
			
			СписокСвязанныхОбъектовДО.Добавить(Стр.GUID);
		Иначе
			СЗДубли.Добавить(СтруктураОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Индикатор.Закрыть();
	
	//заголовок макета
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = "Не удалось найти связь в 1С:Документооборот";
	Область.Параметры.Ит = ТЗВидыДоговоров.Количество() - ТЗКорректныеВидыДоговоров.Количество();   
	ТабДок.Вывести(Область);
	ТабДок1.Вывести(Область);
	
	//шапка таблицы связанные
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапка.Параметры.ВидВзаиморасчетовШапка = "Вид внутреннего документа";
	ТабДок.Вывести(ОбластьШапка);
	ТабДок1.Вывести(ОбластьШапка);
	
	Сообщить(ОбластьШапка.ШиринаСтраницы);
	
	НомерСтроки = 0;
	Для каждого Стр Из ТЗВидыДоговоров Цикл
		Если СписокСвязанныхОбъектовДО.НайтиПоЗначению(Стр.GUID) = Неопределено Тогда
			НомерСтроки = НомерСтроки + 1; 
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.ВидВзаиморасчетов = СокрЛП(Стр.name);
			ОбластьСтрока.Параметры.Папка = СокрЛП(Стр.parent);
			Если СокрЛП(Стр.parent) = "Виды внутренних документов" Тогда
				ОбластьСтрока.Параметры.Папка = "";
			КонецЕсли;
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 		
			ТабДок.Вывести(ОбластьСтрока); 		
			ТабДок1.Вывести(ОбластьСтрока); 		
		КонецЕсли;
	КонецЦикла;
	
	//ЭлементыФормы.ПолеТабличногоДокумента1.Показать( = ТабДок;
	
	ТабДок.Показать();
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь; 
	
	ТабДок1.Показать();
	ТабДок1.ТолькоПросмотр = Истина;
	ТабДок1.ОтображатьСетку = Ложь;
	ТабДок1.ОтображатьЗаголовки = Ложь;	
КонецПроцедуры

// Формирует текст запроса в зависимости от иерархии справочника
//
// Параметры:
//  ЕстьИерархия - Булево
//
// Возвращаемое значение:
//   Текст запроса
//
Функция ПолучитьТекстЗапросаВидыВзаиморасчетов(ЕстьИерархия)
	
	Если  ЕстьИерархия Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТ_ВидыДог.GUID,
		|	ВТ_ВидыДог.name,
		|	ВТ_ВидыДог.parent,
		|	ВидыВзаиморасчетов.Ссылка,
		|	ВидыВзаиморасчетов.Наименование
		|ИЗ
		|	ВТ_ВидыДог КАК ВТ_ВидыДог
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВидыВзаиморасчетов.Ссылка КАК Ссылка,
		|			ВидыВзаиморасчетов.Наименование КАК Наименование,
		|			ЕСТЬNULL(ВидыВзаиморасчетов.Родитель.Наименование, ""Виды внутренних документов"") КАК Родитель
		|		ИЗ
		|			Справочник.ВидыВзаиморасчетов КАК ВидыВзаиморасчетов
		|		ГДЕ
		|			НЕ ВидыВзаиморасчетов.ЭтоГруппа
		|			И НЕ ВидыВзаиморасчетов.ПометкаУдаления
		|			И НЕ ВидыВзаиморасчетов.Ссылка В
		|						(ВЫБРАТЬ
		|							ОбъектыДокументооборота_РАВ.Объект
		|						ИЗ
		|							РегистрСведений.ОбъектыДокументооборота_РАВ КАК ОбъектыДокументооборота_РАВ)) КАК ВидыВзаиморасчетов
		|		ПО ВТ_ВидыДог.name = ВидыВзаиморасчетов.Наименование
		|			И ВТ_ВидыДог.parent = ВидыВзаиморасчетов.Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыВзаиморасчетов.Родитель,ВидыВзаиморасчетов.Наименование";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТ_ВидыДог.GUID,
		|	ВТ_ВидыДог.name,
		|	ВидыВзаиморасчетов.Ссылка,
		|	ВидыВзаиморасчетов.Наименование
		|ИЗ
		|	ВТ_ВидыДог КАК ВТ_ВидыДог
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВидыВзаиморасчетов.Ссылка КАК Ссылка,
		|			ВидыВзаиморасчетов.Наименование КАК Наименование
		|		ИЗ
		|			Справочник.ВидыВзаиморасчетов КАК ВидыВзаиморасчетов
		|		ГДЕ
		|			НЕ ВидыВзаиморасчетов.ПометкаУдаления
		|			И НЕ ВидыВзаиморасчетов.Ссылка В
		|						(ВЫБРАТЬ
		|							ОбъектыДокументооборота_РАВ.Объект
		|						ИЗ
		|							РегистрСведений.ОбъектыДокументооборота_РАВ КАК ОбъектыДокументооборота_РАВ)) КАК ВидыВзаиморасчетов
		|		ПО ВТ_ВидыДог.name = ВидыВзаиморасчетов.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыВзаиморасчетов.Наименование";
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаВидыВзаиморасчетов()


Процедура ОчиститьСвязьВидыВзаиморасчетовНажатие(Элемент)
	
	ОчиститьСвязь("Справочник.ВидыВзаиморасчетов","DMInternalDocumentType","вид взаиморасчетов");
	
КонецПроцедуры

Процедура ОбновитьФайлыНажатие(Элемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыДокументооборота_РАВ.Объект,
		|	ОбъектыДокументооборота_РАВ.ЕстьСвязь,
		|	ОбъектыДокументооборота_РАВ.ЕстьФайлы,
		|	ОбъектыДокументооборота_РАВ.УидИС,
		|	ОбъектыДокументооборота_РАВ.УидДО,
		|	ОбъектыДокументооборота_РАВ.ИмяДО,
		|	ОбъектыДокументооборота_РАВ.ТипОбъектаДО,
		|	ОбъектыДокументооборота_РАВ.Комментарий
		|ИЗ
		|	РегистрСведений.ОбъектыДокументооборота_РАВ КАК ОбъектыДокументооборота_РАВ
		|ГДЕ
		|	ОбъектыДокументооборота_РАВ.ТипОбъектаДО = &ТипОбъектаДО";
		
		Запрос.УстановитьПараметр("ТипОбъектаДО","DMInternalDocument");

	РезультатЗапроса = Запрос.Выполнить();
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Индикатор.НаименованиеОбработкиДанных = "Обновление данных регистра Объекты ДО";
	Индикатор.КомментарийОбработкиДанных = "Пожалуйста подождите...";
	
	Индикатор.Открыть();	

	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоСтрокЗапроса = ВыборкаДетальныеЗаписи.Количество();
	Ит = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ит = Ит + 1;
		///
		РегистрСвязьДО_РАВ = РегистрыСведений.ОбъектыДокументооборота_РАВ.СоздатьНаборЗаписей();
		РегистрСвязьДО_РАВ.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		РегистрСвязьДО_РАВ.Прочитать();
		РегистрСвязьДО_РАВ.Очистить();
		ЗаписьРег = РегистрСвязьДО_РАВ.Добавить();
		ЗаписьРег.Объект = ВыборкаДетальныеЗаписи.Объект;
		ЗаписьРег.ЕстьСвязь = Истина;
		ЕстьФайлы = Ложь;
		ЕстьОбъектВДО = рав_Документооборот.ПроверитьЕстьЛиОбъектВДО(ВыборкаДетальныеЗаписи.УидДО);
		Если ЕстьОбъектВДО Тогда
			ФайлыXDTO = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(ВыборкаДетальныеЗаписи.УидДО,ВыборкаДетальныеЗаписи.ИмяДО,ВыборкаДетальныеЗаписи.ТипОбъектаДО);  
			КоличествоФайлов = ФайлыXDTO.files.Количество();
			ЕстьФайлы = КоличествоФайлов > 0;
		КонецЕсли;
		ЗаписьРег.ЕстьФайлы = ЕстьФайлы;
		ЗаписьРег.УидИС = ВыборкаДетальныеЗаписи.УидИС;
		ЗаписьРег.УидДО = ВыборкаДетальныеЗаписи.УидДО;
		ЗаписьРег.ИмяДО = ВыборкаДетальныеЗаписи.ИмяДО;
		ЗаписьРег.ТипОбъектаДО = ВыборкаДетальныеЗаписи.ТипОбъектаДО;
		ЗаписьРег.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;	
		
		Индикатор.Значение = Окр(100*Ит/КоличествоСтрокЗапроса,2);
		РегистрСвязьДО_РАВ.Записать();
		
	КонецЦикла;
	
	Индикатор.Закрыть();     
	
КонецПроцедуры    


