////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Проверка наличия в конфигурации справочника Пользователи.
//Применяется в обработчике события ОбработкаРасшифровки элемента ПолеТабличногоДокумента
//для определения возможности открытия формы элемента справочника.
//
Перем ЕстьСправочникПользователи Экспорт;
Перем МассивПользователей;
Перем МассивАктивныхПользователей;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура НазначитьРоль(Ячейка, РольДоступна = Неопределено)
	
	Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Ячейка.Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ Ячейка.Расшифровка.Свойство("Роль") Тогда
		Возврат;
	КонецЕсли;
	
	Если РольДоступна = Неопределено Тогда
		РольДоступна = Не Ячейка.Значение;
	КонецЕсли;
	
	Пользователь = Ячейка.Расшифровка.Пользователь;
	Роль = Ячейка.Расшифровка.Роль;
	
	Если РольДоступна Тогда
		Если Не Пользователь.Роли.Содержит(Роль) Тогда
			ИзменитьРоль(Пользователь, Роль, Истина);
		КонецЕсли;
	Иначе
		Если Пользователь.Роли.Содержит(Роль) Тогда
			ИзменитьРоль(Пользователь, Роль, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Ячейка.Значение = Пользователь.Роли.Содержит(Роль);	
	Ячейка.ЦветФона = WebЦвета.ЗеленоЖелтый;
	
КонецПроцедуры

Процедура ВыделитьТекущуюКолонку(ТабличныйДокумент, ЯчейкаЗаголовокКолонки)
	
	//Выделяем ячейки текущей колонки
	ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	
	МассивОбластей = Новый Массив;
	Область = ТабличныйДокумент.Область(ЯчейкаЗаголовокКолонки.Низ + 1, ЯчейкаЗаголовокКолонки.Лево, ТабличныйДокумент.ВысотаТаблицы - 1);
	ВыделенныеОбласти.Добавить(Область);
	
	//Снимаем выделение с текущей ячейки (заголовка колонки)
	ВыделенныеОбласти.Удалить(ЯчейкаЗаголовокКолонки);
	
КонецПроцедуры

Процедура ИзменитьРоль(Пользователь, Роль, ДобавитьРоль)
	
	Если ДобавитьРоль Тогда
		Пользователь.Роли.Добавить(Роль);
	Иначе
		Пользователь.Роли.Удалить(Роль);
	КонецЕсли; 
	Пользователь.Записать();
	Если МассивАктивныхПользователей.Найти(Пользователь.Имя) <> Неопределено
		И МассивПользователей.Найти(Пользователь.Имя) = Неопределено Тогда
		МассивПользователей.Добавить(Пользователь.Имя);
	КонецЕсли; 
	
КонецПроцедуры

// Проверить права текущего пользователя на администрирование пользователей информационной базы.
//
Функция ЕстьПраваНаАдминистрирование() Экспорт
	
	Возврат ПравоДоступа("Администрирование", Метаданные, ПользователиИнформационнойБазы.ТекущийПользователь());
	
КонецФункции	

Функция ПолучитьМассивАктивныхПользователей()
	Перем МассивАктивныхПользователей;
	
	МассивАктивныхПользователей = Новый Массив;
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	НомерТекущегоСоединения = НомерСоединенияИнформационнойБазы();
	
	Для Каждого Соединение ИЗ МассивСоединений Цикл
		Если Соединение.Пользователь <> Неопределено Тогда
			Если Соединение.ИмяПриложения <> "Designer" И Соединение.НомерСоединения <> НомерТекущегоСоединения Тогда
				МассивАктивныхПользователей.Добавить(Соединение.Пользователь.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивАктивныхПользователей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

Процедура СообщитьОбИзменениях(МассивПользователей)
	
	Если МассивПользователей.Количество() > 0 Тогда
		ОчиститьСообщения();
		Сообщить("Были изменены роли пользователей, которые в данный момент работают с ИБ");
		СписокПользователей = "";
		Для Каждого Пользователь ИЗ МассивПользователей Цикл
			СписокПользователей = СписокПользователей + ?(СписокПользователей = "", "(", " ;") + Пользователь;
		КонецЦикла;
		СписокПользователей = СписокПользователей + ")";
		Сообщить(СписокПользователей);			
		Сообщить("Для них новые значения вступят в силу только после перезапуска их сеанса работы с программой");
	КонецЕсли;
	
КонецПроцедуры	
	
//Заполняет реквизит ТаблицуПользователей
//
//Параметры
//	Нет.
//
//
Процедура СформироватьТаблицуПользователей() Экспорт
	
	ТаблицаПользователей.Очистить();
	
	Если ТаблицаПользователей.Количество() = 0 Тогда
		ТаблицаПользователей.Колонки.Очистить();
		ТаблицаПользователей.Колонки.Добавить("НПП");
		ТаблицаПользователей.Колонки.Добавить("Пользователь");
		ТаблицаПользователей.Колонки.Добавить("Имя");
		ТаблицаПользователей.Колонки.Добавить("ПолноеИмя");
	Иначе
		Возврат;
	КонецЕсли; 
	
	НПП = 0;
	Для Каждого Пользователь из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если Пользователь.ПоказыватьВСпискеВыбора ИЛИ Пользователь.АутентификацияСтандартная ИЛИ Пользователь.АутентификацияОС Тогда
			Если ЗначениеЗаполнено(ГруппаПользователей) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Код = &Наименование
				|	И Пользователи.Ссылка В ИЕРАРХИИ(&ГруппаПользователей)";
				
				Запрос.УстановитьПараметр("Наименование", СокрЛП(Пользователь.Имя));
				Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					Продолжить;
				КонецЕсли; 				
			КонецЕсли;
			НПП = НПП + 1;
			НоваяСтрока = ТаблицаПользователей.Добавить();
			НоваяСтрока.НПП = НПП;
			НоваяСтрока.Пользователь = Пользователь;
			НоваяСтрока.Имя = Пользователь.Имя;
			НоваяСтрока.ПолноеИмя = ?(ЗначениеЗаполнено(Пользователь.ПолноеИмя) И СокрЛП(Пользователь.ПолноеИмя) <> СокрЛП(Пользователь.Имя), "; " + Пользователь.ПолноеИмя, "");
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПользователей.Сортировать("Имя");	
	
КонецПроцедуры

//Формирует матрицу ролей - табличный документ
//
//Параметры
// ТабличныйДокумент - ТабличныйДокумент - возвращаемый табличный документ
//
//
Процедура СформироватьТабличныйДокумент(ТабличныйДокумент = Неопределено) Экспорт
	
	СформироватьТаблицуПользователей();
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	Иначе
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.ВыделенныеОбласти.Очистить();
	КонецЕсли;  
	//ТабличныйДокумент.ФиксацияСлева = 2;
	Макет = ПолучитьМакет("Макет");
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка|ПервыйСтолбец"));
	ТабличныйДокумент.ФиксацияСлева = ТабличныйДокумент.ШиринаТаблицы;
	
	Для каждого Роль Из ЭтотОбъект.СписокРолей Цикл
		Область = Макет.ПолучитьОбласть("Шапка|Столбец");
		Область.Параметры.Роль = Роль.Значение;
		Область.Параметры.Заголовок = Новый Структура("Заголовок", Истина);
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;  
	
	ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("Шапка|ПоследнийСтолбец"));
	ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ВысотаТаблицы;
	
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	МассивАктивныхПользователей = ПолучитьМассивАктивныхПользователей();
	Для Каждого СтрокаТЗ из ТаблицаПользователей Цикл
		Пользователь = СтрокаТЗ.Пользователь;
		ИмяПользователя = СтрокаТЗ.Имя;
		
		Область = Макет.ПолучитьОбласть("Строка|ПервыйСтолбец");
		Область.Параметры.Пользователь = ИмяПользователя + СтрокаТЗ.ПолноеИмя;
		Область.Параметры.НПП = СтрокаТЗ.НПП;
		Если ЕстьСправочникПользователи Тогда
			Область.Параметры.ПользовательИмя = Новый Структура("ПользовательИмя", ИмяПользователя);
		КонецЕсли; 
		ОбластьИмениПользователя = Область.Область(1,2);
		Если ИмяПользователя = ИмяТекущегоПользователя Тогда
			ОбластьИмениПользователя.ЦветФона = WindowsЦвета.Подсвеченный;
			ОбластьИмениПользователя.Шрифт = Новый Шрифт(,, Истина);
		ИначеЕсли МассивАктивныхПользователей.Найти(ИмяПользователя) <> Неопределено Тогда
			ОбластьИмениПользователя.ЦветФона = WebЦвета.БледноЗеленый;
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(Область);
		
		Для каждого Роль Из ЭтотОбъект.СписокРолей Цикл
			Область = Макет.ПолучитьОбласть("Строка|Столбец");
			Область.Параметры.РольДоступна = Пользователь.Роли.Содержит(Роль.Значение);
			Область.Параметры.ПользовательРоль = Новый Структура("Пользователь, Роль", Пользователь, Роль.Значение);
			ТабличныйДокумент.Присоединить(Область);
		КонецЦикла;
		
		ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("Строка|ПоследнийСтолбец"));
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подвал|ПервыйСтолбец"));
	Для каждого Роль Из ЭтотОбъект.СписокРолей Цикл
		Область = Макет.ПолучитьОбласть("Подвал|Столбец");
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;
	ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("Подвал|ПоследнийСтолбец"));
	
	ТабличныйДокумент.ФиксацияСлева = 2;	
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(2, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(2, , ТабличныйДокумент.ФиксацияСверху + 1);
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
КонецПроцедуры

Процедура УстановитьДляОбластиЯчеек(ТабличныйДокумент, РольДоступна) Экспорт
	
	МассивАктивныхПользователей = ПолучитьМассивАктивныхПользователей();
	МассивПользователей = Новый Массив;
	Для Каждого Область из ТабличныйДокумент.ВыделенныеОбласти Цикл
		Для Лево = Область.Лево по Область.Лево + (Область.Право - Область.Лево) Цикл
			Для Верх = Область.Верх по Область.Верх + (Область.Низ - Область.Верх) Цикл
				Ячейка = ТабличныйДокумент.Область(Верх, Лево);
				НазначитьРоль(Ячейка, РольДоступна);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	СообщитьОбИзменениях(МассивПользователей);
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки для элемента поля ТабличногоДокумента.
//
Процедура ОбработкаРасшифровкиПоляТабличногоДокумента(ТабличныйДокумент, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяЯчейка = Элемент.ВыделенныеОбласти[0];
	Если ТипЗнч(ТекущаяЯчейка.Расшифровка) = Тип("Структура") И ТекущаяЯчейка.Расшифровка.Свойство("Роль") Тогда
		//Кликнули по ячейке
		
		МассивАктивныхПользователей = ПолучитьМассивАктивныхПользователей();
		МассивПользователей = Новый Массив;
		НазначитьРоль(ТекущаяЯчейка);
		СообщитьОбИзменениях(МассивПользователей);
		
	ИначеЕсли ТипЗнч(ТекущаяЯчейка.Расшифровка) = Тип("Структура") И ТекущаяЯчейка.Расшифровка.Свойство("ПользовательИмя") Тогда
		//Кликнули по ячейке с именем пользователя
		
		//Ищем в справочнике и открываем форму элемента пользователя
		Если ЕстьСправочникПользователи Тогда
			КодПользователя = СокрЛП(ТекущаяЯчейка.Расшифровка.ПользовательИмя);
			НайденнаяСсылка = Справочники.Пользователи.НайтиПоКоду(КодПользователя);
			Если НайденнаяСсылка = Неопределено ИЛИ НайденнаяСсылка.Пустая() Тогда
				КодПользователя = СокрЛП(Сред(ТекущаяЯчейка.Текст, Найти(ТекущаяЯчейка.Текст, ";") + 1));
				НайденнаяСсылка = Справочники.Пользователи.НайтиПоНаименованию(КодПользователя);
			КонецЕсли; 
			Если НайденнаяСсылка <> Неопределено И НЕ НайденнаяСсылка.Пустая() Тогда
				НайденнаяСсылка.ПолучитьОбъект().ПолучитьФорму().Открыть();
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ТекущаяЯчейка.Расшифровка) = Тип("Структура") И ТекущаяЯчейка.Расшифровка.Свойство("Заголовок") Тогда
		//Кликнули по заголовку колонки
		
		//Выделяем ячейки текущей колонки
		ВыделитьТекущуюКолонку(ТабличныйДокумент, ТекущаяЯчейка);
		
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

//////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации();
	ПараметрыРегистрации.Вид = "ДополнительнаяОбработка";
	ПараметрыРегистрации.Версия = "2.0.4";

	//Определяем команды для вывода формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		ПараметрыРегистрации.Наименование, // Представление команды в пользовательском интерфейсе
		"МатрицаРолейПользователейИБ",		// Уникальный идентификатор команды
		"ОткрытиеФормы"
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

// КОНЕЦ БЛОКА СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//Проверка наличия в конфигурации справочника Пользователи.
ЕстьСправочникПользователи = Метаданные.Справочники.Найти("Пользователи") <> Неопределено;
МассивПользователей = Новый Массив;
МассивАктивныхПользователей = Новый Массив;