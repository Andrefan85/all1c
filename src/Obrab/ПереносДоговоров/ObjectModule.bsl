
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ИмяТипаОбъектаДОИзНастроекЗаполнения(ИмяТипа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаполнения.ТипОбъектаПотребителя КАК ТипОбъектаПотребителя,
		|	НастройкиЗаполнения.ТипОбъектаДокументооборота КАК ТипОбъектаДокументооборота
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК НастройкиЗаполнения
		|ГДЕ
		|	НастройкиЗаполнения.ТипОбъектаПотребителя = &ТипВнешнегоОбъекта";
	
	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", ИмяТипа); 
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИмяТипа = ВыборкаДетальныеЗаписи.ТипОбъектаДокументооборота;
		Прервать;
	КонецЦикла;
	
	Возврат ИмяТипа;
	
КонецФункции //ИмяТипаОбъектаДОИзНастроекЗаполнения

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ВыбратьПапкуДоговоров(ФормаВладелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", "DMInternalDocumentFolder");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор папки внутреннего документа'"));
	
	СтруктураПапкиДоговоров = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы,	ФормаВладелец);
	
	Возврат СтруктураПапкиДоговоров;

КонецФункции //ВыбратьПапкуДоговоров

//Создает объект документооборота по ссылке на объект конфигурации-потребителя.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ВнешнийОбъект - ссылка на объект конфигурации-потребителя
//	ТипДокумента - имя типа XDTO объекта
//Возвращает:
//	Созданный объект XDTO, либо Неопределено, если не удалось сформировать документ
//
Функция НовыйОбъектДокументооборотаПоОбъектуИС(Прокси, ВнешнийОбъект, ТипДокумента) Экспорт
	
	СтруктураДокумента = СтруктураДокумента(ТипДокумента);
	СоответствиеРеквизитов = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		СоответствиеСвойствXDTOиРеквизитовФормыДокумента(ТипДокумента);
	
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьСтруктуруДокументаИзПотребителя(
		Прокси, ВнешнийОбъект, СтруктураДокумента, СоответствиеРеквизитов);
	
	ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, ТипДокумента);
	
	Для Каждого СтрокаСоответсвия Из СоответствиеРеквизитов Цикл
		ИнтеграцияС1СДокументооборот.ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ОбъектXDTO, СтрокаСоответсвия.Ключ, СтрокаСоответсвия.Значение, СтруктураДокумента);
	КонецЦикла;
	
	Обработки.ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, ОбъектXDTO, СтруктураДокумента);
	
	//переопределим папку, если она заполнена в табличной части
	ЗаполнитьПапкуДоговоровИзНастроек(Прокси,ОбъектXDTO,ВнешнийОбъект);
	
	ОбъектXDTO.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "");
	ОбъектXDTO.name = Строка(ВнешнийОбъект);
		
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда 
		ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		ExternalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
		ExternalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
		ExternalObject.name = Строка(ВнешнийОбъект);
		ОбъектXDTO.externalObject = ExternalObject;
	КонецЕсли;
	
	Запрос = рав_ПроцедурыБЛЗ.СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = ОбъектXDTO;
	
	Ответ = ИнтеграцияС1СДокументооборот.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ОбъектXDTO = Ответ.object;
	
	РегистрыСведений.ИнтегрированныеОбъекты.ДобавитьСвязь(ОбъектXDTO.objectId.id, ОбъектXDTO.objectId.type, ВнешнийОбъект);
	
	ДоступенФункционалПакетныеЗапросы = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3");
	
	Если СтруктураДокумента.Свойство("Файлы") И СтруктураДокумента.Файлы.Количество() > 0 Тогда
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			Пакет = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBatchRequest");
		КонецЕсли;
		
		Для каждого СтрокаФайла из СтруктураДокумента.Файлы Цикл
		
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
			
			ОбъектВладелец = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
			ОбъектВладелец.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ОбъектXDTO.objectId.id, ОбъектXDTO.objectId.type);
			ОбъектВладелец.name = ОбъектXDTO.name;
			
			Запрос.owner = ОбъектВладелец;
			
			Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMFile");
			Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
			Запрос.file.name = "";
			
			Запрос.file.binaryData = СтрокаФайла.ДвоичныеДанные;
			Запрос.file.extension = СтрокаФайла.Расширение;
			Запрос.file.modificationDate = СтрокаФайла.ДатаСоздания;
			Запрос.file.modificationDateUniversal = СтрокаФайла.ДатаМодификацииУниверсальная;
			Запрос.file.name = СтрокаФайла.Наименование;
			Запрос.file.size = СтрокаФайла.Размер;
			
			Если ДоступенФункционалПакетныеЗапросы Тогда
				Пакет.requests.Добавить(Запрос);
			Иначе
				Ответ = ИнтеграцияС1СДокументооборот.ВыполнитьЗапрос(Прокси, Запрос);
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			//rav+ dmil_1_1_8_9 24/08/16
			//Для Каждого ЗапросПакета Из Пакет.requests Цикл
				Ответ = ИнтеграцияС1СДокументооборот.ВыполнитьЗапрос(Прокси, Пакет);
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			//КонецЦикла;
			//rav-
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

//Возвращает структуру документа документооборота по типу XDTO документа.
//Параметры:
//	ТипДокумента - тип документа XDTO
//Возвращает:
//	Структуру с полями документа указанного типа
Функция СтруктураДокумента(ТипДокумента)
	
	СтруктураДокумента = новый Структура; // содержит полную структуру документа 
	ОбъектнаяСтруктура = новый Структура; // для описания объектных типов
	
	СтруктураДокумента.Вставить("ID");
	СтруктураДокумента.Вставить("Тип",ТипДокумента);
	
	// Реквизиты, общие для всех документов
	СтруктураДокумента.Вставить("Наименование");
	СтруктураДокумента.Вставить("Комментарий");
	
	Если ТипДокумента = "DMCorrespondent" Тогда
		СтруктураДокумента.Вставить("ИНН");
		СтруктураДокумента.Вставить("КПП");
		СтруктураДокумента.Вставить("КодПоОКПО");
		СтруктураДокумента.Вставить("ПолноеНаименование");
	Иначе
		СтруктураДокумента.Вставить("Описание");
		СтруктураДокумента.Вставить("РегистрационныйНомер");
		СтруктураДокумента.Вставить("ДатаРегистрации");
		СтруктураДокумента.Вставить("СрокИсполнения");
		СтруктураДокумента.Вставить("Сумма");
		
		ОбъектнаяСтруктура.Вставить("Подписал");
		ОбъектнаяСтруктура.Вставить("Подразделение");
		ОбъектнаяСтруктура.Вставить("ГрифДоступа");
		ОбъектнаяСтруктура.Вставить("ВидДокумента");
		ОбъектнаяСтруктура.Вставить("ВопросДеятельности");
		ОбъектнаяСтруктура.Вставить("Организация");
		ОбъектнаяСтруктура.Вставить("Ответственный");
		ОбъектнаяСтруктура.Вставить("Состояние");
		ОбъектнаяСтруктура.Вставить("Валюта");
		// проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			ОбъектнаяСтруктура.Вставить("Проект");
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипДокумента = "DMInternalDocument" Тогда 
		
		// Реквизиты значений простых типов.
		СтруктураДокумента.Вставить("ДатаНачалаДействия");
		СтруктураДокумента.Вставить("ДатаОкончанияДействия");
		СтруктураДокумента.Вставить("Бессрочный");
		
		// Реквизиты значений объектных типов.
		ОбъектнаяСтруктура.Вставить("Папка");
		ОбъектнаяСтруктура.Вставить("Подготовил");
		ОбъектнаяСтруктура.Вставить("Корреспондент");
		ОбъектнаяСтруктура.Вставить("КонтактноеЛицо");
		ОбъектнаяСтруктура.Вставить("ПорядокПродления");
		
	ИначеЕсли ТипДокумента = "DMIncomingDocument" Тогда
		
		// Реквизиты значений простых типов.
		СтруктураДокумента.Вставить("НомерОтправителя");
		СтруктураДокумента.Вставить("ДатаОтправителя");
		
		// Реквизиты значений объектных типов.
		ОбъектнаяСтруктура.Вставить("Отправитель");
		ОбъектнаяСтруктура.Вставить("Адресат");
		ОбъектнаяСтруктура.Вставить("СпособПолучения");
		
	ИначеЕсли ТипДокумента = "DMOutgoingDocument" Тогда 
		
		// Реквизиты значений простых типов.
		СтруктураДокумента.Вставить("НомерПолучателя");
		СтруктураДокумента.Вставить("ДатаПолучателя");
		СтруктураДокумента.Вставить("Отправлен");
		СтруктураДокумента.Вставить("ДатаОтправки");
		
		// Реквизиты значений объектных типов.
		ОбъектнаяСтруктура.Вставить("Получатель");
		ОбъектнаяСтруктура.Вставить("Адресат");
		ОбъектнаяСтруктура.Вставить("Подготовил");
		ОбъектнаяСтруктура.Вставить("СпособОтправки");
		
	ИначеЕсли ТипДокумента = "DMCorrespondent" Тогда
		
		// Реквизиты значений объектных типов.
		ОбъектнаяСтруктура.Вставить("ФизЛицо");
		ОбъектнаяСтруктура.Вставить("Ответственный");
		ОбъектнаяСтруктура.Вставить("ЮрФизЛицо");
		
	КонецЕсли;
	
	Для каждого Элемент из ОбъектнаяСтруктура Цикл
		СтруктураДокумента.Вставить(Элемент.Ключ, Элемент.Значение);
		СтруктураДокумента.Вставить(Элемент.Ключ + "ID", Элемент.Значение);
		СтруктураДокумента.Вставить(Элемент.Ключ + "Тип", Элемент.Значение);
	КонецЦикла;
	
	ДополнительныеСвойства = новый ТаблицаЗначений;
	ДополнительныеСвойства.Колонки.Добавить("Свойство");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоТип");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоID");
	ДополнительныеСвойства.Колонки.Добавить("Значение");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеТип");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеID");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СписокЗначений"));
	
	ДополнительныеСвойства.Колонки.Добавить("СписокДоступныхТипов", новый ОписаниеТипов(МассивТипов));
	
	СтруктураДокумента.Вставить("Свойства", ДополнительныеСвойства);
	
	Если ТипДокумента <> "DMCorrespondent" Тогда
		
		Файлы = новый ТаблицаЗначений;
		Файлы.Колонки.Добавить("Тип");
		Файлы.Колонки.Добавить("Наименование");
		Файлы.Колонки.Добавить("Описание");
		Файлы.Колонки.Добавить("Автор");
		Файлы.Колонки.Добавить("ID");
		Файлы.Колонки.Добавить("Размер");
		Файлы.Колонки.Добавить("Расширение");
		Файлы.Колонки.Добавить("ДатаСоздания");
		Файлы.Колонки.Добавить("ДатаМодификацииУниверсальная");
		Файлы.Колонки.Добавить("ДвоичныеДанные");
		
		СтруктураДокумента.Вставить("Файлы", Файлы);
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  Прокси  - WS-Прокси
//  ОбъектXDTO  - Документ, заполненный по типовым правилам интеграции
//  ВнешнийОбъект  - Ссылка на внешний объект
//
Процедура ЗаполнитьПапкуДоговоровИзНастроек(Прокси,ОбъектXDTO,ВнешнийОбъект)
	
	Если ПапкиДоговоров.Количество() > 0 Тогда
		СтрокаТЗ = ПапкиДоговоров.Найти(ВнешнийОбъект.Организация,"Организация");	
		Если СтрокаТЗ <> Неопределено Тогда
			//найдем папку по id и заменим в объекте XDTO
			IDПапки = СтрокаТЗ.ИдПапки;
			ПапкаXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMInternalDocumentFolder");
			ПапкаXDTO.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, IDПапки, "DMInternalDocumentFolder");
			ПапкаXDTO.name =  СтрокаТЗ.ПапкаДокументов;
			ОбъектXDTO.folder = ПапкаXDTO; 
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПапкуДоговоровИзНастроек


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПрикрпепитьФайлКОбъектуДО(Прокси, ВнешнийОбъект, Файл, ДокументXDTO) Экспорт
	
	ПолноеИмяФайла = Файл.ПолноеИмя;
	
	
	ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(); 
	
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ВызватьИсключение
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПараметрыСоздания.Имя = Файл.ИмяБезРасширения;
	ПараметрыСоздания.Размер = Файл.Размер();
	ПараметрыСоздания.ВебКлиент = Ложь;   		
	ПараметрыСоздания.Текст = "";
	
	/////////////////////////////////////////////////
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
	
	//ОбъектВладелец = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	//ОбъектВладелец.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументXDTO.Id, Тип);
	//ОбъектВладелец.name = Представление;
	
	Запрос.owner = ДокументXDTO;
	
	Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
	
	Запрос.file.binaryData = ПолучитьИзВременногоХранилища(
	ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Запрос.file.extension = ПараметрыСоздания.Расширение;
	Запрос.file.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Запрос.file.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Запрос.file.name = ПараметрыСоздания.Имя;
	Запрос.file.size = ПараметрыСоздания.Размер;
	Если ПараметрыСоздания.Расширение = "pdf" Тогда
		Запрос.file.scannedOriginal = Истина;
	КонецЕсли;
	
	Размер = Запрос.file.binaryData.Размер();
	МаксРазмерФайла = Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Получить();
	РазмерВМб = Размер / 1048576;
	РазмерВМбМакс = МаксРазмерФайла / 1048576;
	
	Если Размер > МаксРазмерФайла Тогда
		Сообщить("Не удалось прикрепить файл, большой размер: " + ВнешнийОбъект + " " + ПараметрыСоздания.Имя);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Запрос.file.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		

КонецПроцедуры // ПрикрпепитьФайлКОбъектуДО()
