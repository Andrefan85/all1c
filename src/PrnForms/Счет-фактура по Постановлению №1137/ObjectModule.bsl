#Если Клиент Тогда
	

Процедура СведенияОЮрФизЛице(Фирма, Сведения, ДатаДействия)
	//ПараметрыОтбор = Новый Структура;
	//Если ТипЗнч(Фирма) = Тип("СправочникСсылка.Организации") Тогда
	//	ПараметрыОтбор.Вставить("Организация", Фирма);
	//	РегистрПечать = РегистрыСведений.НаименованиеДляПечати_РАВ;
	//	НаборЗаписей = РегистрПечать.СрезПоследних(ДатаДействия, ПараметрыОтбор);
	//Иначе
	//	РегистрПечать = РегистрыСведений.НаименованиеДляПечатиКА_РАВ;
	//	ПараметрыОтбор.Вставить("Контрагент", Фирма);
	//	НаборЗаписей = РегистрПечать.СрезПоследних(ДатаДействия, ПараметрыОтбор);
	//КонецЕсли;
	Если ТипЗнч(Фирма) = Тип("СправочникСсылка.Организации") Тогда
		НаименованиеРегистра = "НаименованиеДляПечати_РАВ";
		Параметр = "Организация";
	Иначе
		НаименованиеРегистра = "НаименованиеДляПечатиКА_РАВ";
		Параметр = "Контрагент";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные ПЕРВЫЕ 1
		|	НаименованиеДляПечати_РАВСрезПоследних."+ Параметр + " Как Организация,
		|	НаименованиеДляПечати_РАВСрезПоследних.НаименованиеСокращенное,
		|	НаименованиеДляПечати_РАВСрезПоследних.НаименованиеПолное,
		|	НаименованиеДляПечати_РАВСрезПоследних.ЮридическийАдрес,
		|	НаименованиеДляПечати_РАВСрезПоследних.КПП
		|ИЗ
		|	РегистрСведений." + НаименованиеРегистра + ".СрезПоследних(&Дата, " + Параметр + " = &Организация) КАК НаименованиеДляПечати_РАВСрезПоследних";

	Запрос.УстановитьПараметр("Дата", ДатаДействия);
	Запрос.УстановитьПараметр("Организация", Фирма);

	НаборЗаписей = Запрос.Выполнить().Выгрузить();

	Если НаборЗаписей.Количество() > 0 Тогда
		РегистрНаименование = НаборЗаписей[0];
		СокращенноеНаименованиеДляПечати = РегистрНаименование.НаименованиеСокращенное;
		ПолноеНаименованиеДляПечати      = РегистрНаименование.НаименованиеПолное;
		ЮрАдрес                          = РегистрНаименование.ЮридическийАдрес;
		КПП								 = РегистрНаименование.КПП;
		Сведения.Вставить("ПолноеНаименование", 		ПолноеНаименованиеДляПечати);
		Сведения.Вставить("НаименованиеСокращенное", 	СокращенноеНаименованиеДляПечати);
		Сведения.Вставить("ЮридическийАдрес", 			ЮрАдрес);
		Сведения.Вставить("КПП", 						КПП);
    КонецЕсли;
КонецПроцедуры
	
Функция Печать() Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	
	//ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	
	Корректировочный    = СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	Если Корректировочный Тогда
		ПечатьКорректировочногоСчетаФактуры1137(СсылкаНаОбъект, ТабДокумент);
	Иначе
		ПечатьСчетаФактуры1137(СсылкаНаОбъект, ТабДокумент);
	КонецЕсли;
	
	ТабДокумент.ВерхнийКолонтитул.Выводить = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница     = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(СсылкаНаОбъект, "Счет-фактура") + " г.";
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева  = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа = "Лист [&НомерСтраницы]";
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	Возврат ТабДокумент;

КонецФункции

Процедура СобратьДанныеДляПечати(Ссылка, ДанныеДляПечати, УчетнаяПолитика)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Корректировочный = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	Для Каждого СтрДокОснования Из Ссылка.ДокументыОснования Цикл
		// Получить экземпляр документа на печать
		
		Если НЕ ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = Неопределено;
		ТипОснования = ТипЗнч(СтрДокОснования.ДокументОснование);

		Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			ИЛИ Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансиСуммовуюРазницу(Ссылка);
		ИначеЕсли Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеСФНалоговогоАгента(Ссылка);
		ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияУслугПоПереработке(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоАкту(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеОС(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоПринятиеКУчетуОС(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.МодернизацияОС") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоМодернизацияОС(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоНачислениеНДСпоСМРхозспособом(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеНМАОрганизаций(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(СтрДокОснования.ДокументОснование, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
			И ТипЗнч(СтрДокОснования.ДокументОснование.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(СтрДокОснования.ДокументОснование.ДокументОтгрузки, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
			И ТипЗнч(СтрДокОснования.ДокументОснование.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоПередачеОС(СтрДокОснования.ДокументОснование.ДокументОтгрузки, Ссылка);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Если Корректировочный Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(СтрДокОснования.ДокументОснование, Ссылка);
			Иначе
				ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(СтрДокОснования.ДокументОснование, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭкземплярДанныхДляПечати = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// Пересчет из уе в рубли
		Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
			И Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
			И Не ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета Тогда
			
			ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Ссылка.Дата);
			Если ВерсияПостановления = 2 Тогда
				ФормироватьСчетФактуруПоУЕвРублях = Истина;
			Иначе
				Если УчетнаяПолитика = Неопределено тогда
					УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Ссылка.Ссылка.Дата, Ссылка.Организация);
				КонецЕсли;
				ФормироватьСчетФактуруПоУЕвРублях = ЗначениеЗаполнено(УчетнаяПолитика) 
					И УчетнаяПолитика.Свойство("ФормироватьСчетФактуруПоУЕвРублях")
					И УчетнаяПолитика.ФормироватьСчетФактуруПоУЕвРублях;
			КонецЕсли;

			Если ФормироватьСчетФактуруПоУЕвРублях Тогда
				ПерезаполнитьСуммыПоУЕвРублях(ЭкземплярДанныхДляПечати, СтрДокОснования.ДокументОснование, Ссылка);
				ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение данных для печати
		Если ДанныеДляПечати = Неопределено Тогда
			ДанныеДляПечати = ЭкземплярДанныхДляПечати;
		Иначе
			
			Для каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
					НоваяТабЧасть  = СтрДанных.Значение;
					
					Для каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
						СтрокаТабЧасти = СтараяТабЧасть.Добавить();
						Для каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
							Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
								СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли НЕ ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
					// Если данный параметр для печати шапки документа еще не  определен - то определяем его
					ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;	
		
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//*Если НЕ Корректировочный Тогда
	
		ТаблицаДатОплат = Ссылка.ДатаНомерДокументовОплаты.Выгрузить();
		ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаОплат Из ТаблицаДатОплат Цикл
			Если Не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
				И ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
				СтрокиКУдалению.Добавить(СтрокаОплат);
			КонецЕсли; 
		КонецЦикла; 
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДатОплат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
		
	//*КонецЕсли;

КонецПроцедуры

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.ЕдиницаИзмеренияКод = "";
		Строчка.СтавкаНДС			= Шапка.СтавкаНДС;
		СуммаДляПечати    			= ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаВключаетНДС 	= Истина;
		Строчка.СуммаНДС  			= УчетНДС.РассчитатьСуммуНДС(СуммаДляПечати, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.Сумма     			= СуммаДляПечати;
		Строчка.Цена      			= СуммаДляПечати;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
 	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ОтчетКомиссионераОПродажах.Подразделение КАК Подразделение,
	|	ОтчетКомиссионераОПродажах.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ОтчетКомиссионераОПродажах.Контрагент
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ОтчетКомиссионераОПродажах.СуммаДокумента КАК Сумма,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	|	ОтчетКомиссионераОПродажах.Товары.(
	|		Номенклатура КАК Товар,
	|		ВЫРАЗИТЬ(ОтчетКомиссионераОПродажах.Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|		СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|		СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|		СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|		СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	КонецЕсли;
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС,
	|	АдресДоставки КАК АдресДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(800)) КАК ТоварНаименование,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	               |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	               |	РеализацияТоваровУслугТовары.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок <> 0
	               |				ИЛИ РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки <> 0
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугТовары.Цена
	               |	КОНЕЦ КАК Цена,
	               |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	               |	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры КАК Серия,
	               |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	               |	1 КАК НомерТЧ,
	               |	РеализацияТоваровУслугТовары.КоличествоЗачетное
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугУслуги.Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(800)),
	               |	"""",
	               |	"""",
	               |	NULL,
	               |	NULL,
	               |	"""",
	               |	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	               |	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслугУслуги.ПроцентАвтоматическихСкидок <> 0
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
	               |	КОНЕЦ,
	               |	РеализацияТоваровУслугУслуги.СтавкаНДС,
	               |	РеализацияТоваровУслугУслуги.СуммаНДС,
	               |	РеализацияТоваровУслугУслуги.Сумма,
	               |	NULL,
	               |	NULL,
	               |	РеализацияТоваровУслугУслуги.НомерСтроки,
	               |	2,
	               |	0
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерТЧ,
	               |	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("АдресДоставки",	 УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки));

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.Цена              = ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС,ВыборкаСтрокТовары.СуммаНДС,0)) / ВыборкаСтрокТовары.Количество);
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.Код                КАК СтранаПроисхожденияКод,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код                   КАК ЕдиницаИзмеренияКод,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	1                                      КАК НомерТЧ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.Код                КАК СтранаПроисхожденияКод,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код                   КАК ЕдиницаИзмеренияКод,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	2                                      КАК НомерТЧ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Оборудование КАК ВозвратТоваровПоставщикуОборудование
	|
	|ГДЕ
	|	ВозвратТоваровПоставщикуОборудование.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки
	|";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.Цена              = ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС,ВыборкаСтрокТовары.СуммаНДС,0)) / ВыборкаСтрокТовары.Количество);
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщику()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.Код                КАК СтранаПроисхожденияКод,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код                   КАК ЕдиницаИзмеренияКод,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ВозвратТоваровПоставщикуТовары
	|
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.Цена              = ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС,ВыборкаСтрокТовары.СуммаНДС,0)) / ВыборкаСтрокТовары.Количество);
		Строчка.СтавкаНДС         = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияУслугПоПереработке(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент  КАК Покупатель,
	|	СуммаДокумента   КАК Сумма,
	|	ВалютаДокумента  КАК Валюта,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияУслугПоПереработке.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	               |	NULL КАК СтранаПроисхождения,
	               |	"""" КАК СтранаПроисхожденияКод,
	               |	"""" КАК ПредставлениеСтраны,
	               |	РеализацияУслугПоПереработке.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	РеализацияУслугПоПереработке.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	               |	NULL КАК НомерГТД,
	               |	NULL КАК ПредставлениеГТД,
	               |	РеализацияУслугПоПереработке.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА РеализацияУслугПоПереработке.ПроцентСкидкиНаценки <> 0
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияУслугПоПереработке.Цена
	               |	КОНЕЦ КАК Цена,
	               |	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияУслугПоПереработке.СуммаНДС КАК СуммаНДС,
	               |	РеализацияУслугПоПереработке.Сумма КАК Сумма,
	               |	РеализацияУслугПоПереработке.ХарактеристикаНоменклатуры КАК Характеристика,
	               |	РеализацияУслугПоПереработке.СерияНоменклатуры КАК Серия
	               |ИЗ
	               |	Документ.РеализацияУслугПоПереработке.Продукция КАК РеализацияУслугПоПереработке
	               |ГДЕ
	               |	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияУслугПоПереработке.Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Содержание КАК СТРОКА(200)),
	               |	NULL,
	               |	"""",
	               |	"""",
	               |	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	               |	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	               |	NULL,
	               |	"""",
	               |	РеализацияУслугПоПереработке.Количество,
	               |	РеализацияУслугПоПереработке.Цена,
	               |	РеализацияУслугПоПереработке.СтавкаНДС,
	               |	РеализацияУслугПоПереработке.СуммаНДС,
	               |	РеализацияУслугПоПереработке.Сумма,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	               |ГДЕ
	               |	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товар";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;
		Строчка.Цена              = ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС,ВыборкаСтрокТовары.СуммаНДС,0)) / ВыборкаСтрокТовары.Количество);
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияУслугПоПереработке()

Функция СобратьДанныеПоАкту(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("", "ТоварНаименование");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.Организация КАК Поставщик,
	|	АктОбОказанииПроизводственныхУслуг.Подразделение КАК Подразделение,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент КАК Покупатель,
	|	АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК Сумма,
	|	АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК Валюта,
	|	АктОбОказанииПроизводственныхУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	// RAV NB +
	|  АктОбОказанииПроизводственныхУслуг.Грузополучатель КАК Грузополучатель, 
    // RAV NB -
	|	АктОбОказанииПроизводственныхУслуг.Услуги.(
	|		Ссылка,
	|		НомерСтроки,
	|		Количество,
	|		Номенклатура КАК Товар,
	|		ВесовойКоэффициент,
    |		ВЫБОР
    |			КОГДА ПроцентСкидкиНаценки <> 0
    |				ТОГДА 0
    |			ИНАЧЕ Цена
    |		КОНЕЦ КАК Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		ЕдиницаИзмерения,
	|		Коэффициент,
	|		НоменклатурнаяГруппа,
	|		" + СтрокаВыборкиПоляСодержания + ",
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|		"""" КАК СтранаПроисхождения,
	|		"""" КАК СтранаПроисхожденияКод,
	|		"""" КАК ПредставлениеСтраны
	|	)
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Услуги.Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС = Шапка.СуммаВключаетНДС;
		Строчка.Цена             = ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС,ВыборкаСтрокТовары.СуммаНДС,0)) / ВыборкаСтрокТовары.Количество);
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;


КонецФункции

// Функция собирает данные по документу основанию ПередачаОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
    Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение КАК Подразделение,
	|	Контрагент  КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента   КАК Сумма,
	|	ВалютаДокумента  КАК Валюта,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|
	|ГДЕ
	|	ПередачаОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК Товар,
	               |	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	               |	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
	               |	ТаблицаОС.СуммаНДС КАК СуммаНДС,
	               |	ТаблицаОС.Сумма КАК Сумма
	               |ИЗ
	               |	Документ.ПередачаОС.ОС КАК ТаблицаОС
	               |ГДЕ                                 	
	               |	ТаблицаОС.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товар";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();
                                                        
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.Количество          = 1;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ПринятиеКУчетуОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПринятиеКУчетуОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Организация,
	|	ПринятиеКУчетуОС.Организация              КАК Поставщик,
	|	ПринятиеКУчетуОС.Организация              КАК Грузоотправитель,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК Подразделение,
	|	СобственныеКонтрагенты.Контрагент         КАК Покупатель,
	|	СобственныеКонтрагенты.Контрагент         КАК Грузополучатель,
	|	ПринятиеКУчетуОС.СтоимостьБУХоз           КАК СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета  КАК ВалютаДокумента,
	|	ИСТИНА                                    КАК УчитыватьНДС,
	|	ЛОЖЬ                                      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			ПринятиеКУчетуОС.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &ДокументОснование
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НДСНачисленный.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(НДСНачисленный.НДС) КАК НДС,
	               |	НДСНачисленный.СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	               |ГДЕ
	               |	НДСНачисленный.Регистратор = &ДокументОснование
	               |	И НДСНачисленный.ВидЦенности = &ВидЦенностиСМРхозспособом
	               |	И НДСНачисленный.ВидНачисления = &ВидНачисленияКуплате
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленный.СтавкаНДС";
	Запрос.УстановитьПараметр("ВидЦенностиСМРхозспособом", Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидНачисленияКуплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
				   
	ЗапросОС = Новый Запрос;
	ЗапросОС.Текст = "ВЫБРАТЬ
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(200)) КАК ОбъектНаименование,
	                 |	СУММА(НДСпоОСиНМА.СуммаБезНДС + НДСпоОСиНМА.НДС) КАК Сумма
	                 |ИЗ
	                 |	РегистрНакопления.НДСпоОСиНМА КАК НДСпоОСиНМА
	                 |ГДЕ
	                 |	НДСпоОСиНМА.Регистратор = &ДокументОснование
	                 |	И НДСпоОСиНМА.ВидДвижения = &ВидДвиженияПриход
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(200))";
	ЗапросОС.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросОС.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
					 
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  ?(НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), Шапка.Организация, Шапка.Грузополучатель));
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ТаблицаПоОС = ЗапросОС.Выполнить().Выгрузить();
	
	Если ТаблицаПоОС.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	КолонкаРаспределения = ТаблицаПоОС.ВыгрузитьКолонку("Сумма");
	
	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		КолонкаСуммаБезНДС = 	ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.СуммаБезНДС, КолонкаРаспределения);
		КолонкаНДС = 			ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.НДС, КолонкаРаспределения);
		
		Если КолонкаСуммаБезНДС =  Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для К = 0 По КолонкаСуммаБезНДС.Количество() - 1 Цикл
			Строчка = Товары.Добавить();
			Строчка.Товар               = ТаблицаПоОС[К].Объект;
			Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ?(ПустаяСтрока(ТаблицаПоОС[К].ОбъектНаименование), ТаблицаПоОС[К].Объект, СокрЛП(ТаблицаПоОС[К].ОбъектНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
			Строчка.Сумма               = КолонкаСуммаБезНДС[К];
			Если КолонкаНДС <> Неопределено Тогда
				Строчка.СуммаНДС            = КолонкаНДС[К];
			КонецЕсли;
			Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		КонецЦикла;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПринятиеКУчетуОС()

// Функция собирает данные по документу основанию МодернизацияОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоМодернизацияОС(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МодернизацияОС.Организация,
	|	МодернизацияОС.Организация              	КАК Поставщик,
	|	СобственныеКонтрагенты.Контрагент	   		КАК Покупатель,
	|	МодернизацияОС.СтоимостьБУХоз           	КАК СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета	КАК ВалютаДокумента,
	|	ИСТИНА                                   	КАК УчитыватьНДС,
	|	ЛОЖЬ                                      	КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			МодернизацияОС.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	МодернизацияОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НДСНачисленный.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(НДСНачисленный.НДС) КАК НДС,
	               |	НДСНачисленный.СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	               |ГДЕ
	               |	НДСНачисленный.Регистратор = &ДокументОснование
	               |	И НДСНачисленный.ВидЦенности = &ВидЦенностиСМРхозспособом
	               |	И НДСНачисленный.ВидНачисления = &ВидНачисленияКуплате
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленный.СтавкаНДС";
	Запрос.УстановитьПараметр("ВидЦенностиСМРхозспособом", Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидНачисленияКуплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
				   
	ЗапросОС = Новый Запрос;
	ЗапросОС.Текст = "ВЫБРАТЬ
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(200)) КАК ОбъектНаименование,
	                 |	СУММА(НДСпоОСиНМА.СуммаБезНДС + НДСпоОСиНМА.НДС) КАК Сумма
	                 |ИЗ
	                 |	РегистрНакопления.НДСпоОСиНМА КАК НДСпоОСиНМА
	                 |ГДЕ
	                 |	НДСпоОСиНМА.Регистратор = &ДокументОснование
	                 |	И НДСпоОСиНМА.ВидДвижения = &ВидДвиженияПриход
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	НДСпоОСиНМА.Объект,
	                 |	ВЫРАЗИТЬ(НДСпоОСиНМА.Объект.НаименованиеПолное КАК СТРОКА(200))";
	ЗапросОС.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросОС.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
					 
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    "");
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ТаблицаПоОС = ЗапросОС.Выполнить().Выгрузить();
	
	Если ТаблицаПоОС.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	КолонкаРаспределения = ТаблицаПоОС.ВыгрузитьКолонку("Сумма");
	
	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		КолонкаСуммаБезНДС = 	ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.СуммаБезНДС, КолонкаРаспределения);
		КолонкаНДС = 			ОбщегоНазначения.РаспределитьПропорционально(ВыборкаСтрокТовары.НДС, КолонкаРаспределения);
		
		Если КолонкаСуммаБезНДС =  Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для К = 0 По КолонкаСуммаБезНДС.Количество() - 1 Цикл
			Строчка = Товары.Добавить();
			Строчка.Товар               = ТаблицаПоОС[К].Объект;
			Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ?(ПустаяСтрока(ТаблицаПоОС[К].ОбъектНаименование), ТаблицаПоОС[К].Объект, СокрЛП(ТаблицаПоОС[К].ОбъектНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
			Строчка.Сумма               = КолонкаСуммаБезНДС[К];
			Если КолонкаНДС <> Неопределено Тогда
				Строчка.СуммаНДС            = КолонкаНДС[К];
			КонецЕсли;
			Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		КонецЦикла;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоМодернизацияОС()

// Функция собирает данные по документу основанию НачислениеНДСпоСМРхозспособом и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ВидСвязиОрг", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НачислениеНДСпоСМРхозспособом.Организация,
	|	НачислениеНДСпоСМРхозспособом.Организация              	КАК Поставщик,
	|	СобственныеКонтрагенты.Контрагент	   		КАК Покупатель,
	|	Константы.ВалютаРегламентированногоУчета	КАК ВалютаДокумента,
	|	ИСТИНА                                   	КАК УчитыватьНДС,
	|	ЛОЖЬ                                      	КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|		ПО 
	|			НачислениеНДСпоСМРхозспособом.Организация = СобственныеКонтрагенты.Объект
	|			И СобственныеКонтрагенты.ВидСвязи = &ВидСвязиОрг,
	|	Константы КАК Константы
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос.Текст = "ВЫБРАТЬ
	               |	НачислениеНДСпоСМРхозспособомСМРхозспособом.ОбъектСтроительства КАК Товар,
	               |	ВЫРАЗИТЬ(НачислениеНДСпоСМРхозспособомСМРхозспособом.ОбъектСтроительства.Наименование КАК СТРОКА(200)) КАК ТоварНаименование,
	               |	НачислениеНДСпоСМРхозспособомСМРхозспособом.СуммаБезНДС КАК Сумма,
	               |	НачислениеНДСпоСМРхозспособомСМРхозспособом.СтавкаНДС,
	               |	НачислениеНДСпоСМРхозспособомСМРхозспособом.НДС КАК СуммаНДС
	               |ИЗ
	               |	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособомСМРхозспособом
	               |ГДЕ
	               |	НачислениеНДСпоСМРхозспособомСМРхозспособом.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НачислениеНДСпоСМРхозспособомСМРхозспособом.НомерСтроки";
	
	РезультатЗапросаТовары = Запрос.Выполнить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    "");
	ДанныеДляПечати.Вставить("Покупатель",       ?(НЕ ЗначениеЗаполнено(Шапка.Покупатель), Шапка.Организация, Шапка.Покупатель));
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ВыборкаСтрокТовары = РезультатЗапросаТовары.Выбрать();
	
	Если ВыборкаСтрокТовары.Количество() = 0 Тогда
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления: " + ВыборкаСтрокТовары.ТоварНаименование;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоМодернизацияОС()

// Функция собирает данные по документу основанию ПередачаНМАОрганизаций и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеНМАОрганизаций(ДокОснование, Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ПередачаНМА.Организация,
	               |	ПередачаНМА.Организация КАК Поставщик,
	               |	ПередачаНМА.Контрагент КАК Покупатель,
	               |	ПередачаНМА.СуммаДокумента КАК СуммаДокумента,
	               |	ПередачаНМА.ВалютаДокумента КАК Валюта,
	               |	ПередачаНМА.УчитыватьНДС КАК УчитыватьНДС,
	               |	ПередачаНМА.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ПередачаНМА.НематериальныйАктив КАК Товар,
	               |	ВЫРАЗИТЬ(ПередачаНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	               |	ПередачаНМА.СтавкаНДС КАК СтавкаНДС,
	               |	ПередачаНМА.СуммаНДС КАК СуммаНДС,
	               |	ПередачаНМА.Сумма КАК Сумма
	               |ИЗ
	               |	Документ.ПередачаНМА КАК ПередачаНМА
	               |ГДЕ
	               |	ПередачаНМА.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    "");
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.Товар;
	Строчка.ТоварНаименование   = Шапка.ТоварНаименование;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	Строчка.Цена                = Шапка.Сумма;
	Строчка.Сумма               = Шапка.Сумма;
	Строчка.СуммаНДС            = Шапка.СуммаНДС;
	Строчка.СтавкаНДС           = Шапка.СтавкаНДС;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование, Ссылка)


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	               |	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения, &ПустаяСтранаПроисхождения) КАК СтранаПроисхождения,
	               |	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения.Код, """") КАК СтранаПроисхожденияКод,
	               |	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.СтранаПроисхождения.Представление, """") КАК ПредставлениеСтраны,
	               |	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД, &ПустойНомерГТД) КАК НомерГТД,
	               |	ЕСТЬNULL(ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СерияНоменклатуры.НомерГТД.Представление, """") КАК ПредставлениеГТД,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма
	               |ИЗ
	               |	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	               |ГДЕ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.НомерСтроки";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Ссылка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Ссылка.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         Ссылка.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          Ссылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()

Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(Ссылка)
	
	Если Не (Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		или Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) 
		Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Ссылка.Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = ?(Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, мНадписьПредоплата, "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)");
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	               |	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
	               |	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
	               |	СчетФактураВыданныйАвансы.СтавкаНДС
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	               |ГДЕ
	               |	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданныйАвансы.СтавкаНДС,
	               |	СчетФактураВыданныйАвансы.Номенклатура,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))";
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
			Строчка = Товары.Добавить();
			Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
			Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СуммаВключаетНДС    = Истина;
			Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма     = СтрокаТаблицы.Сумма;
		
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = НадписьНаименование;
		Строчка.ТоварНаименование   = НадписьНаименование;
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СуммаВключаетНДС	= Истина;

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

Функция СобратьДанныеСФНалоговогоАгента(Ссылка)
	
	Если Не Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Покупатель,
	|	СчетФактураВыданный.Контрагент КАК Поставщик,
	|	СчетФактураВыданный.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

				   
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Ссылка.Дата);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		               |	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		               |	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		               |	СчетФактураВыданныйАвансы.СтавкаНДС
		               |ИЗ
		               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		               |ГДЕ
		               |	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СчетФактураВыданныйАвансы.СтавкаНДС,
		               |	СчетФактураВыданныйАвансы.Номенклатура,
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))";
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Строчка = Товары.Добавить();
			Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, Шапка.ВидАгентскогоДоговора);
			Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), Шапка.ВидАгентскогоДоговора));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма     = СтрокаТаблицы.Сумма;
			Строчка.СуммаВключаетНДС	= Истина;
			
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = Шапка.ВидАгентскогоДоговора;
		Строчка.ТоварНаименование   = Шапка.ВидАгентскогоДоговора;
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;
 		Строчка.СуммаВключаетНДС	= Истина;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,		
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.Количество КАК Количество,
	|	ТаблицаПоТоварам.Цена КАК Цена,
	|	ТаблицаПоТоварам.Сумма КАК Сумма,
	|	ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Товар,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Характеристика,
	|	""Товары"" КАК ВидПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	""Россия"",
	|	NULL,
	|	""Россия"",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	""Услуги""
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	Если ЗначениеЗаполнено(Поставщик.ГоловнаяОрганизация) Тогда 
		Грузоотправитель = Поставщик;
		Поставщик = Поставщик.ГоловнаяОрганизация;
	КонецЕсли;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,НомерИсходногоДокумента,ДатаИсходногоДокумента");
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаИсходногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, РеквизитыСФ.Дата);
	
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ЕстьТовары = ЕстьТовары ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Товары";
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
		
КонецФункции	

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Если ЗначениеЗаполнено(Поставщик.ГоловнаяОрганизация) Тогда 
		Поставщик = Поставщик.ГоловнаяОрганизация;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Организация",       Шапка.Организация);
	ДанныеДляПечати.Вставить("Поставщик",         Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  Шапка.СуммаВключаетНДС);
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Исправление");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, РеквизитыСФ.Дата);
	
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры КАК Серия,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) / КорректировкаРеализацииТовары.Количество
	|				ИНАЧЕ КорректировкаРеализацииТовары.Сумма / КорректировкаРеализацииТовары.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаПослеИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.КоличествоДоИзменения = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения) / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|				ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Сумма <> КорректировкаРеализацииТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Цена <> КорректировкаРеализацииТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Содержание КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) / КорректировкаРеализацииУслуги.Количество
	|				ИНАЧЕ КорректировкаРеализацииУслуги.Сумма / КорректировкаРеализацииУслуги.Количество
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.КоличествоДоИзменения = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|				ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииУслуги.Количество <> КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Сумма <> КорректировкаРеализацииУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.СуммаНДС <> КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Цена <> КорректировкаРеализацииУслуги.ЦенаДоИзменения)";
	
	Если РеквизитыСФ.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;
	
	Для каждого Строчка Из ТаблицаРезультата Цикл
		Строчка.НаименованиеТовара = СокрЛП(Строчка.НаименованиеТовара) + ФормированиеПечатныхФорм.ПредставлениеСерий(Строчка);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции	

// Процедура пересчитывает ДанныеДляПечати.ТабличнаяЧасть в рубли для договоров в у.е.
// Вызывается из процедуры «Печать»
Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 			ТекущееОснование);
	Запрос.УстановитьПараметр("Организация", 		Ссылка.Организация);
	Запрос.УстановитьПараметр("Контрагент",         Ссылка.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Ссылка.ДоговорКонтрагента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(РасчетыПоРеализации.СуммаРег) КАК СуммаВзаиморасчетов,
	|	РасчетыПоРеализации.Регистратор КАК ДокументОснование
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализации
	|ГДЕ
	|	РасчетыПоРеализации.Регистратор = &Ссылка
	|	И РасчетыПоРеализации.Активность = ИСТИНА
	|	И РасчетыПоРеализации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыПоРеализации.Организация = &Организация
	|	И РасчетыПоРеализации.Контрагент = &Контрагент
	|	И РасчетыПоРеализации.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоРеализации.Регистратор";
	
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ
		ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации", "РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыПоРеализации.СуммаРег", "-РасчетыПоРеализации.СуммаРег");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РасчетСуммыНДСПоСтавке = Ложь;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() И Выборка.СуммаВзаиморасчетов <> 0 Тогда
		СтрокиСчетаФактуры = ДанныеДляПечати.ТабличнаяЧасть;
		СтрокиСчетаФактуры.Колонки.Добавить("СуммаБезНДС");
		СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		МассивРаспределения = Новый Массив;
		Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
			СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(СтрокаСчетаФактуры.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
			СуммаБезНДС = СуммаСНДС - СтрокаСчетаФактуры.СуммаНДС;

			МассивРаспределения.Добавить(СуммаСНДС);
			СтрокаСчетаФактуры.СуммаБезНДС = СуммаБезНДС;
			
		КонецЦикла;
		
		СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
		УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
		
		Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
			Если РасчетСуммыНДСПоСтавке Тогда
				//Выделение суммы НДС, Расчет суммы без НДС
				ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
				
				СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
				СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
				
			Иначе
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаНДС);
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаСчетаФактуры.СуммаРублевая, МассивРаспределения);
				Если МассивРаспределенныхСумм <> Неопределено Тогда
					СтрокаСчетаФактуры.Сумма = МассивРаспределенныхСумм[0];
					СтрокаСчетаФактуры.СуммаНДС = МассивРаспределенныхСумм[1];
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаСчетаФактуры.СуммаВключаетНДС Тогда
				СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма+СтрокаСчетаФактуры.СуммаНДС;
			КонецЕсли;

		КонецЦикла;
		СтрокиСчетаФактуры.Колонки.Удалить(СтрокиСчетаФактуры.Колонки.СуммаБезНДС);
		СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): -");
			
		ИначеЕсли (Найти(ТекПараметр, "ИНН/КПП продавца:") <> 0)
			    и (СокрЛП(ТекПараметр) = "ИНН/КПП продавца:") Тогда
			ОбластьМакета.Параметры.Установить(т, "ИНН/КПП продавца: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: --");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: --");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): --");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("КоличествоЗачетное");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

Процедура ПечатьСчетаФактуры1137(Ссылка, ТабДокумент) Экспорт

	Макет = ПолучитьМакет("СчетФактура1137");
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	СобратьДанныеДляПечати(Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Филиал
	Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
		ДанныеДляПечати.Вставить("Организация",      Ссылка.Организация.ГоловнаяОрганизация);
	КонецЕсли;	
	//Филиал
	Если ЗначениеЗаполнено(ДанныеДляПечати.Поставщик.ГоловнаяОрганизация) Тогда
		ДанныеДляПечати.Вставить("Поставщик",        Ссылка.Организация.ГоловнаяОрганизация);
	КонецЕсли;	
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Дата,ВидСчетаФактуры,Исправление,НомерИсправления,ДоговорКонтрагента");
	Дата               = РеквизитыСФ.Дата;
	ВидСчетаФактуры    = РеквизитыСФ.ВидСчетаФактуры;
	Исправление        = РеквизитыСФ.Исправление;
	НомерИсправления   = РеквизитыСФ.НомерИсправления;
	ДоговорКонтрагента = РеквизитыСФ.ДоговорКонтрагента;

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	//+RAV
	СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик,  СведенияОПоставщике, Дата);
	СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, СведенияОПокупателе, Дата);
	//ОтборПоОрганизации = Новый Структура("Организация", ДанныеДляПечати.Поставщик);
	//РегистрНаименование = РегистрыСведений.НаименованиеДляПечати_РАВ.ПолучитьПоследнее(Дата, ОтборПоОрганизации);
	//СокращенноеНаименованиеДляПечати = РегистрНаименование.НаименованиеСокращенное;
	//ПолноеНаименованиеДляПечати      = РегистрНаименование.НаименованиеПолное;
	//ЮрАдрес                          = РегистрНаименование.ЮридическийАдрес;
	//СведенияОПоставщике.Вставить("ПолноеНаименование", 		ПолноеНаименованиеДляПечати);
	//СведенияОПоставщике.Вставить("НаименованиеСокращенное", СокращенноеНаименованиеДляПечати);
	//СведенияОПоставщике.Вставить("ЮридическийАдрес", ЮрАдрес);
	//-RAV

	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправления = "Исправление №" + Строка(НомерИсправления) 
			+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
 	Иначе 	
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		И ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: --"
		
	Иначе
		
		ИндексПодразделения = 0;
		//+RAV
		//Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
		//	ИндексПодразделения = ДанныеДляПечати.Организация.ЦифровойИндексОбособленногоПодразделения;
		Если ЗначениеЗаполнено(Ссылка.Организация.ГоловнаяОрганизация) Тогда
			ИндексПодразделения = Ссылка.Организация.ЦифровойИндексОбособленногоПодразделения;
		КонецЕсли;
		//-RAV
		Если ИндексПодразделения <> 0 Тогда
			ДанныеДляПечати.Номер = ДанныеДляПечати.Номер + "/" + ИндексПодразделения;
		КонецЕсли;		
		
		КПП = Ссылка.Организация.КПП;//+RAV ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	КонецЕсли;
	
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура") + " г.";
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		
	Иначе
		
		ТолькоУслуги = Истина;
		Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
			Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга)
				ИЛИ ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				ТолькоУслуги = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		    // RAV NB +
		///Если ТолькоУслуги Тогда
		//	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
		//	ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		//Иначе
		// RAV NB -
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
				"--", 
				?(ДанныеДляПечати.Грузоотправитель = "он же", 
					ДанныеДляПечати.Грузоотправитель, 
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
			
			Если ДанныеДляПечати.Свойство("АдресДоставки") 
				И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
				ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					ДанныеДляПечати.АдресДоставки,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
			Иначе
				ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					"--",
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
//RAV NB //КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
			И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
		    Продолжить;
		КонецЕсли;
		СтрокаПоДокументу = СтрокаПоДокументу
			+ ?(ПустаяСтрока(СтрокаПоДокументу), "К платежно-расчетному документу № ",", ")
			+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
		
	КонецЦикла; 
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			СтрокаПоДокументу = "К платежно-расчетному документу № -- от --";
		Иначе
			СтрокаПоДокументу = "К платежно-расчетному документу №    от";
		КонецЕсли; 
	КонецЕсли; 
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код "
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
 	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		
		Цена =Строчка.Цена;
		Количество = Строчка.Количество;

		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
		//RAV+
	Если ТипЗнч(Ссылка.ДокументОснование) = Тип("ДокументСсылка.ПередачаОС") Тогда
	Строчка.Цена = цена-Строчка.СуммаНДС;
	Строчка.Количество = Количество;
	Строчка.ЕдиницаИзмеренияКод = "796";
	Строчка.ЕдиницаИзмерения = "шт";
	КонецЕсли;
   //RAV-

		
	КонецЦикла;
	 //+ RAV
	Если ТипЗнч(Ссылка.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		 "Количество, КоличествоЗачетное, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	Иначе
	//- RAV	
		ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	КонецЕсли;
	// Выводим строки таблицы
	
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	ИтогоСтоимость = 0;
	ИтогоСуммаНДС  = 0;
	ИтогоВсего     = 0;
    	
	СчетФактураБезНДС = Истина;
    	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
			//+RAV
			Если ТипЗнч(Ссылка.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				Если  Ссылка.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаВЗачетномВесе Тогда
					ОбластьМакета.Параметры.Количество = Строчка.КоличествоЗачетное;
					ОбластьМакета.Параметры.Цена   	  = ?(Строчка.КоличествоЗачетное = 0, 0, Окр(Строчка.СуммаБезНДС/Строчка.КоличествоЗачетное,2));
				КонецЕсли;
			КонецЕсли;
			//-RAV	
		Иначе
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
				ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			Иначе
				ОбластьМакета.Параметры.Стоимость = 0;
			КонецЕсли;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		Иначе
			СчетФактураБезНДС = Ложь;
		КонецЕсли;
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "";
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоСтоимость = ИтогоСтоимость + Строчка.СуммаБезНДС;
		ИтогоСуммаНДС  = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего     = ИтогоВсего    + Строчка.СуммаСНДС;
        	
	КонецЦикла;

	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	
	Если СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ИтогоСтоимость;
	КонецЕсли;
	Если СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ИтогоВСего;
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
    	
	//ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	//+RAV
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ПодписывающиеЛица = равОбщегоНазначения.ОтветственныеЛицаЗаПодписьДокументов(Ссылка.Организация, Ссылка.Метаданные().Имя,Ссылка.Дата);
	Если Не ЗначениеЗаполнено(ПодписывающиеЛица) Тогда
		ТабДокумент.Вывести(ОбластьМакета);
	Иначе
		Генеральный  = ПодписывающиеЛица["Генеральный"];
		Руководитель = ПодписывающиеЛица["Руководитель"];
		ГлавБух = ПодписывающиеЛица["Главный бухгалтер"];
		Если Генеральный <> Неопределено Тогда
			ОбластьМакета.Параметры.ФИОРуководителя = Генеральный[0].Значение.ФИО;
		ИначеЕсли Руководитель <> Неопределено Тогда
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель[0].Значение.ФИО;
		КонецЕсли;	
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Руководитель <> Неопределено Тогда
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Строка|Руководитель");
			//ОбластьПолуПодвал.Параметры.Заполнить(ДанныеДляПечати);
			СписокДляПодписи = Руководитель[0].Значение;
			ОбластьПолуПодвал.Параметры.ПоДоверенностиРуководитель = СписокДляПодписи.Приказ;
			ОбластьПолуПодвал.Параметры.ДолжностьИОРуководителя    = СписокДляПодписи.Должность;
			ОбластьПолуПодвал.Параметры.ИОРуководителя= СписокДляПодписи.ФИО;
		Иначе
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Пусто|Руководитель");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьПолуПодвал);
		Если ГлавБух <> Неопределено Тогда
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Строка|Бух");
			СписокДляПодписи = ГлавБух[0].Значение;
			ОбластьПолуПодвал.Параметры.ПоДоверенностиБух = СписокДляПодписи.Приказ;
			ОбластьПолуПодвал.Параметры.ДолжностьИОБухгалтера = СписокДляПодписи.Должность;
			ОбластьПолуПодвал.Параметры.ИОГлавногоБухгалтера = СписокДляПодписи.ФИО;
		Иначе
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Пусто|Бух");
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьПолуПодвал);
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНиЗ");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "Свидетельство,");
	Иначе
		ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	//-RAV
	ТабДокумент.Вывести(ОбластьМакета);
	                        
	//Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
	//	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
	//		СведенияОПокупателе, "Свидетельство,");
	//Иначе
	//	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
	//		СведенияОПоставщике, "Свидетельство,");
	//КонецЕсли;
	//
	//ТабДокумент.Вывести(ОбластьМакетаПодвал);

КонецПроцедуры

Процедура ПечатьКорректировочногоСчетаФактуры1137(Ссылка, ТабДокумент)

	Макет = ПолучитьМакет("КорректировочныйСчетФактура1137");
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	СобратьДанныеДляПечати(Ссылка, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//+RAV
	//Филиал
	Если ЗначениеЗаполнено(ДанныеДляПечати.Организация.ГоловнаяОрганизация) Тогда
		ДанныеДляПечати.Вставить("Организация",      Ссылка.Организация.ГоловнаяОрганизация);
	КонецЕсли;	
	//Филиал
	Если ЗначениеЗаполнено(ДанныеДляПечати.Поставщик.ГоловнаяОрганизация) Тогда
		ДанныеДляПечати.Вставить("Поставщик",        Ссылка.Организация.ГоловнаяОрганизация);
	КонецЕсли;	
	//-RAV
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Номер,Дата,
		|Исправление,НомерИсправления,
		|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента,
		|НомерИсходногоДокумента,ДатаИсходногоДокумента,
		|УчитыватьИсправлениеИсходногоДокумента,НомерИсправленияИсходногоДокумента,ДатаИсправленияИсходногоДокумента");
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.Номер = РеквизитыСФ.НомерИсправляемогоКорректировочногоДокумента;
		ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	Иначе
		ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;
	
	ОбластьМакета.Параметры.НомерСчетаФактуры = РеквизитыСФ.НомерИсходногоДокумента;
	ОбластьМакета.Параметры.ДатаСчетаФактуры  = Формат(РеквизитыСФ.ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	
	Если РеквизитыСФ.НомерИсправленияИсходногоДокумента = 0 
		ИЛИ НЕ РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента Тогда
		ОбластьМакета.Параметры.НомерИсправления = "--";
	Иначе
		ОбластьМакета.Параметры.НомерИсправления = РеквизитыСФ.НомерИсправленияИсходногоДокумента;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РеквизитыСФ.ДатаИсправленияИсходногоДокумента) 
		ИЛИ НЕ РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента Тогда
		ОбластьМакета.Параметры.ДатаИсправления = "--";
	Иначе
		ОбластьМакета.Параметры.ДатаИсправления = Формат(РеквизитыСФ.ДатаИсправленияИсходногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;

	Если РеквизитыСФ.НомерИсправления = 0 
		ИЛИ НЕ РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = "--";
	Иначе
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = РеквизитыСФ.НомерИсправления;
	КонецЕсли;
	Если НЕ РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = "--";
	Иначе
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");
	
	КПП = Ссылка.Организация.КПП;//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		"Валюта: наименование, код " + ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"Валюта: наименование, код");		
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаТабличнойЧасти = ДанныеДляПечати.ТабличнаяЧасть;
	
	ИтогРазницаБезНДСУменьшение = 0;
	ИтогРазницаБезНДСУвеличение = 0;
	ИтогРазницаСНДСУменьшение   = 0;
	ИтогРазницаСНДСУвеличение   = 0;
	ИтогРазницаНДСУменьшение    = 0;
	ИтогРазницаНДСУвеличение    = 0;
	
	СчетФактураБезНДС = Истина;
		
	Для Каждого СтрокаТабличнойЧасти ИЗ ВыборкаТабличнойЧасти Цикл 
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		          		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		Иначе
			СчетФактураБезНДС = Ложь;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
				
		ИтогРазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение + СтрокаТабличнойЧасти.РазницаБезНДСУменьшение;
		ИтогРазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение + СтрокаТабличнойЧасти.РазницаБезНДСУвеличение;
		ИтогРазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение   + СтрокаТабличнойЧасти.РазницаСНДСУменьшение;
		ИтогРазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение   + СтрокаТабличнойЧасти.РазницаСНДСУвеличение;
		ИтогРазницаНДСУменьшение    = ИтогРазницаНДСУменьшение    + СтрокаТабличнойЧасти.РазницаНДСУменьшение;
		ИтогРазницаНДСУвеличение    = ИтогРазницаНДСУвеличение    + СтрокаТабличнойЧасти.РазницаНДСУвеличение;
				
	КонецЦикла;	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	                                    
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение;
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение;
	
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение;
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение;
	ОбластьМакета.Параметры.РазницаНДСУменьшение    = ?(СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУменьшение);
	ОбластьМакета.Параметры.РазницаНДСУвеличение    = ?(СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУвеличение);
    	
	ТабДокумент.Вывести(ОбластьМакета);
	// +RAV
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ПодписывающиеЛица = равОбщегоНазначения.ОтветственныеЛицаЗаПодписьДокументов(Ссылка.Организация, Ссылка.Метаданные().Имя,Ссылка.Дата);
	Если Не ЗначениеЗаполнено(ПодписывающиеЛица) Тогда
		ТабДокумент.Вывести(ОбластьМакета);
	Иначе
		Генеральный  = ПодписывающиеЛица["Генеральный"];
		Руководитель = ПодписывающиеЛица["Руководитель"];
		ГлавБух = ПодписывающиеЛица["Главный бухгалтер"];
		Если Генеральный <> Неопределено Тогда
			ОбластьМакета.Параметры.ФИОРуководителя = Генеральный[0].Значение.ФИО;
		ИначеЕсли Руководитель <> Неопределено Тогда
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель[0].Значение.ФИО;
		КонецЕсли;	
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Руководитель <> Неопределено Тогда
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Строка|Руководитель");
			//ОбластьПолуПодвал.Параметры.Заполнить(ДанныеДляПечати);
			СписокДляПодписи = Руководитель[0].Значение;
			ОбластьПолуПодвал.Параметры.ПоДоверенностиРуководитель = СписокДляПодписи.Приказ;
			ОбластьПолуПодвал.Параметры.ДолжностьИОРуководителя    = СписокДляПодписи.Должность;
			ОбластьПолуПодвал.Параметры.ИОРуководителя= СписокДляПодписи.ФИО;
		Иначе
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Пусто|Руководитель");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьПолуПодвал);
		Если ГлавБух <> Неопределено Тогда
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Строка|Бух");
			СписокДляПодписи = ГлавБух[0].Значение;
			ОбластьПолуПодвал.Параметры.ПоДоверенностиБух = СписокДляПодписи.Приказ;
			ОбластьПолуПодвал.Параметры.ДолжностьИОБухгалтера = СписокДляПодписи.Должность;
			ОбластьПолуПодвал.Параметры.ФИОГлавногоБухгалтера = СписокДляПодписи.ФИО;
		Иначе
			ОбластьПолуПодвал = Макет.ПолучитьОбласть("ИО_Пусто|Бух");
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьПолуПодвал);
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНиЗ");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	Если Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "Свидетельство,");
	Иначе
		ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	//-RAV
	//ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	//ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);	
	//ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

#КонецЕсли
