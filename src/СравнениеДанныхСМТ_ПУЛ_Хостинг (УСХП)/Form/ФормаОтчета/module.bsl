////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
//

Перем СоответствиеНастройкаРезультат Экспорт;         // Соответствие, в котором хранятся все результаты при текущем открытии отчета
Перем ПредставлениеНастройки         Экспорт;         // Представление настройки при редактировании отдельной настройки
Перем ПанельНастроекНарисована       Экспорт;         // Флаг, означающий что панель настроек после открытия нарисована
Перем ДействияЭлементовФормы         Экспорт;         // Структура, содеражащая действия элементов формы, формируемых программно

// ДЕЙСТВИЯ С РЕЗУЛЬТАТОМ

Процедура ДействияСРезультатомПечатьНажатие(Элемент)
	
	ТиповыеОтчеты.ПечатьТиповогоОтчета(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомВывестиКопиюРезультатаВТабличныйДокумент(Кнопка)

	ТиповыеОтчеты.ПоказатьКопиюРезультата(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомСохранитьРезультатВНастройке(Кнопка)
	
	ТиповыеОтчеты.СохранитьРезультатВНастройке(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомСравнитьТекущийРезультатССохраненным(Кнопка)
	
	ТиповыеОтчеты.СохранитьРезультатССохраненным(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомЗаголовок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, ЭтаФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

// ОБЩИЕ ПРОЦЕДУРЫ

Процедура ОбновитьОтчет() Экспорт
	
	СостояниеМодифицированности = Модифицированность;
	Если НЕ ПанельНастроекНарисована тогда
		ОбновлениеОтображения();
	КонецЕсли;
	ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ЭтотОбъект, ЭтаФорма);
	ПараметрыПанели  = ТиповыеОтчеты.ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	Отказ = Ложь;
	ТиповыеОтчеты.ПроверитьЗначенияПараметров(ЗначенияНастроек, ПараметрыПанели, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекСМТ = Новый Структура;
	СтруктураНастроекСМТ.Вставить("АдресТелематическогоСервера",АдресТелематическогоСервера);
	СтруктураНастроекСМТ.Вставить("ИдОтчетаДляПолученияДанных",ИдОтчетаДляПолученияДанных);
	СтруктураНастроекСМТ.Вставить("ИдШаблонаДляПолученияДанных",ИдШаблонаДляПолученияДанных);
	СтруктураНастроекСМТ.Вставить("ИдШаблонаДляЗаправок",ИдШаблонаДляЗаправок);	
	СтруктураНастроекСМТ.Вставить("ИмяОтчетаДляПолученияДанных",ИмяОтчетаДляПолученияДанных);
	СтруктураНастроекСМТ.Вставить("Логин",Логин);
	СтруктураНастроекСМТ.Вставить("Пароль",Пароль);
	СтруктураНастроекСМТ.Вставить("ПортТелематическогоСервера",ПортТелематическогоСервера);
	СтруктураНастроекСМТ.Вставить("ЧасовойПояс",ЧасовойПояс);
	СтруктураНастроекСМТ.Вставить("ХранениеИдТехники",ХранениеИдТехники);
	СтруктураНастроекСМТ.Вставить("СвойствоАЗС",СвойствоАЗС);
	СтруктураНастроекСМТ.Вставить("СвойствоАЗК",СвойствоАЗК);
	СтруктураНастроекСМТ.Вставить("Токен",Токен);
	
	СформироватьОтчет(ЭлементыФормы.Результат, ДанныеРасшифровки,,СтруктураНастроекСМТ);
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ЭлементыФормы.Результат, Заголовок, Строка(ПараметрыСеанса.ТекущийПользователь));
	Модифицированность = СостояниеМодифицированности;
	
КонецПроцедуры

// ОБРАБОТЧИКИ КНОПОК ФОРМЫ  
Процедура ДействияФормыСформировать(Кнопка)
	
	Если (НЕ ЗначениеЗаполнено(ХранениеИдТехники)) ИЛИ (НЕ ЗначениеЗаполнено(СвойствоАЗС)) ИЛИ (НЕ ЗначениеЗаполнено(СвойствоАЗК)) Тогда
		Предупреждение("Необходимо заполнить свойства основных средств по кнопке ""Настрйоки СМТ"" для корректного формирования отчета");
		Возврат;
	Иначе	
		ОбновитьОтчет();  	
	КонецЕсли;
		
КонецПроцедуры

Процедура ДействияФормыСформировать1(Кнопка)
	
	//////////////////////////////////////ОбновитьОтчет();  	
	////////////////////////////////////
	////////////////////////////////////СоедиенниеУстановлено = Истина;
	////////////////////////////////////
	////////////////////////////////////
	//////////////////////////////////////Wialon = Новый COMОбъект("V83.COMConnector");
	////////////////////////////////////Wialon = Новый COMОбъект("WialonActiveX.WialonConnection");
	////////////////////////////////////
	////////////////////////////////////Попытка
	////////////////////////////////////	//Units = Wialon.Login(АдресТелематическогоСервера, ПортТелематическогоСервера, Логин, Пароль);
	////////////////////////////////////	Units = Wialon.Login("https://activex.gurtam.com",443,"00772","qcv0kpwl");
	////////////////////////////////////	//_Units = Wialon.Login("https://activex.gurtam.com",443,"ЮбилейныйИшим","юбилейный12345");
	////////////////////////////////////	Сообщить(Wialon.GetLastError());
	////////////////////////////////////	//Сообщить(Wialon.GetLastError())
	////////////////////////////////////Исключение  
	////////////////////////////////////	//Сообщить(Wialon.GetLastError());
	////////////////////////////////////	Сообщить(ОписаниеОшибки());
	////////////////////////////////////	СоедиенниеУстановлено = Ложь;
	////////////////////////////////////КонецПопытки;
	////////////////////////////////////
	////////////////////////////////////Если Units = Неопределено Тогда
	////////////////////////////////////	СоедиенниеУстановлено = Ложь;
	////////////////////////////////////КонецЕсли; 
	////////////////////////////////////
	////////////////////////////////////HTTP =  Новый HTTPСоединение(Сервер,80,"geos","rav01agro");
	
	//HTTP =  Новый HTTPСоединение(Сервер,80,"geos","rav01agro");
	
	HTTP =  Новый HTTPСоединение("hosting.wialon.com",443);
	
	//получим sid	
	//иТекстЗапроса = "/wialon/ajax.html?svc=core/login&params={""user"":""" + Логин + """,""password"":""" + Пароль + """}""";
	иТекстЗапроса = "/?svc=core/login&params={""token"":""f6d3b150f3a27f440a91eb22c574343cC523D64898F815969C43E026A5416A761C882B59""}""";
	ЗапросКСерверу = Новый HTTPЗапрос(иТекстЗапроса);
	Ответ = HTTP.Получить(ЗапросКСерверу);
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Сообщить(СокрЛП(Ответ.КодСостояния));
	
	
	
	
	
	//СтрокаEid = Найти(ОтветСтрока,"""eid"":""");
	//
	//Если СтрокаEid > 0 Тогда
	//	SessionID = Сред(ОтветСтрока,СтрокаEid+7,32);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройку(Кнопка)
	
	ТиповыеОтчеты.СохранитьТекущуюНастройку(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройкуКак(Кнопка)
	
	ТиповыеОтчеты.СохранитьТекущуюНастройкуКак(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаСписокВариантовНажатие(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), Ложь);
	ПанельНастроекНарисована = Ложь;
	
	Если Не РежимРедактированияНастройки тогда
		ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
		ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНастройкуСтруктуры(Кнопка)
	
	РезультатРедактирования = ТиповыеОтчеты.РедактироватьСтруктуруОтчета(ЭтотОбъект, ЭтаФорма);
	Если РезультатРедактирования тогда
		ОбновитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьПанельПользователя(Кнопка)
	
	ТиповыеОтчеты.РедактироватьПанельПользователя(ЭтотОбъект, ЭтаФорма);
		
КонецПроцедуры

Процедура ДействияФормыРедактироватьОписаниеИПользователей(Кнопка)
	
	ТиповыеОтчеты.ОткрытьФормуСохраненнойНастройки(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельВариантов(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ ФОРМЫ

Процедура ПриОткрытии()
	
	// Реквизит формы и компоновщик отчета ссылаются на один компоновщик
	ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
	ТиповыеОтчеты.УстановитьВариантПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	
	// Нарисуем кнопки выбора настроек на верхней панели
	ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УстановитьВидимостьПанелиВариантовПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УстановитьВидимостьПанелиПользователяПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.ВосстановитьНастройкиФормыОтчета(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
	СтруктураНастроекПоУмолчанию = Новый Структура;
	
	ТабДокНастроек = ПолучитьМакет("ПараметрыПоУмолчанию");
	
	Для Ит = 1 По ТабДокНастроек.ВысотаТаблицы Цикл
		
		СтруктураНастроекПоУмолчанию.Вставить(ТабДокНастроек.Область(Ит,1).Текст,ТабДокНастроек.Область(Ит,2).Текст);		
		
	КонецЦикла;
	
	АдресТелематическогоСервера = ВосстановитьЗначение("АдресТелематическогоСервера");
	Если АдресТелематическогоСервера = Неопределено ИЛИ АдресТелематическогоСервера = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("АдресТелематическогоСервера") Тогда
			АдресТелематическогоСервера = СтруктураНастроекПоУмолчанию["АдресТелематическогоСервера"]; 	
		КонецЕсли;
	Иначе
		АдресТелематическогоСервера = ВосстановитьЗначение("АдресТелематическогоСервера")
	КонецЕсли;  
	
	ПортТелематическогоСервера = ВосстановитьЗначение("ПортТелематическогоСервера");
	Если ПортТелематическогоСервера = Неопределено ИЛИ ПортТелематическогоСервера = 0 Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ПортТелематическогоСервера") Тогда
			ПортТелематическогоСервера = СтруктураНастроекПоУмолчанию["ПортТелематическогоСервера"]; 	
		КонецЕсли;
	Иначе
		ПортТелематическогоСервера = ВосстановитьЗначение("ПортТелематическогоСервера")
	КонецЕсли;
	
	ЧасовойПояс = ВосстановитьЗначение("ЧасовойПояс");
	Если ЧасовойПояс = Неопределено ИЛИ ЧасовойПояс = 0 Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ЧасовойПояс") Тогда
			ЧасовойПояс = СтруктураНастроекПоУмолчанию["ЧасовойПояс"]; 	
		КонецЕсли;
	Иначе
		ЧасовойПояс = ВосстановитьЗначение("ЧасовойПояс")
	КонецЕсли;

	
	Логин = ВосстановитьЗначение("Логин");
	Если Логин = Неопределено ИЛИ Логин = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("Логин") Тогда
			Логин = СтруктураНастроекПоУмолчанию["Логин"]; 	
		КонецЕсли;
	Иначе
		Логин = ВосстановитьЗначение("Логин")
	КонецЕсли;

	
	Пароль = ВосстановитьЗначение("Пароль");
	Если Пароль = Неопределено ИЛИ Пароль = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("Пароль") Тогда
			Пароль = СтруктураНастроекПоУмолчанию["Пароль"]; 	
		КонецЕсли;
	Иначе
		Пароль = ВосстановитьЗначение("Пароль")
	КонецЕсли;

	
	ИмяОтчетаДляПолученияДанных = ВосстановитьЗначение("ИмяОтчетаДляПолученияДанных");
	Если ИмяОтчетаДляПолученияДанных = Неопределено ИЛИ ИмяОтчетаДляПолученияДанных = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ИмяОтчетаДляПолученияДанных") Тогда
			ИмяОтчетаДляПолученияДанных = СтруктураНастроекПоУмолчанию["ИмяОтчетаДляПолученияДанных"]; 	
		КонецЕсли;
	Иначе
		ИмяОтчетаДляПолученияДанных = ВосстановитьЗначение("ИмяОтчетаДляПолученияДанных")
	КонецЕсли;
	
	ИдШаблонаДляПолученияДанных = ВосстановитьЗначение("ИдШаблонаДляПолученияДанных");
	Если ИдШаблонаДляПолученияДанных = Неопределено ИЛИ ИдШаблонаДляПолученияДанных = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ИдШаблонаДляПолученияДанных") Тогда
			ИдШаблонаДляПолученияДанных = СтруктураНастроекПоУмолчанию["ИдШаблонаДляПолученияДанных"]; 	
		КонецЕсли;
	Иначе
		ИдШаблонаДляПолученияДанных = ВосстановитьЗначение("ИдШаблонаДляПолученияДанных")
	КонецЕсли;
	
	ИдШаблонаДляЗаправок = ВосстановитьЗначение("ИдШаблонаДляЗаправок");
	Если ИдШаблонаДляЗаправок = Неопределено ИЛИ ИдШаблонаДляЗаправок = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ИдШаблонаДляЗаправок") Тогда
			ИдШаблонаДляЗаправок = СтруктураНастроекПоУмолчанию["ИдШаблонаДляЗаправок"]; 	
		КонецЕсли;
	Иначе
		ИдШаблонаДляЗаправок = ВосстановитьЗначение("ИдШаблонаДляЗаправок")
	КонецЕсли;
	
	ИдОтчетаДляПолученияДанных = ВосстановитьЗначение("ИдОтчетаДляПолученияДанных");
	Если ИдОтчетаДляПолученияДанных = Неопределено ИЛИ ИдОтчетаДляПолученияДанных = "" Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ИдОтчетаДляПолученияДанных") Тогда
			ИдОтчетаДляПолученияДанных = СтруктураНастроекПоУмолчанию["ИдОтчетаДляПолученияДанных"]; 	
		КонецЕсли;
	Иначе
		ИдОтчетаДляПолученияДанных = ВосстановитьЗначение("ИдОтчетаДляПолученияДанных")
	КонецЕсли;
	
	ХранениеИдТехники = ВосстановитьЗначение("ХранениеИдТехники");
	Если ХранениеИдТехники = Неопределено Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("ХранениеИдТехники") Тогда
			ХранениеИдТехники = СтруктураНастроекПоУмолчанию["ХранениеИдТехники"]; 	
		КонецЕсли;
	Иначе
		ХранениеИдТехники = ВосстановитьЗначение("ХранениеИдТехники")
	КонецЕсли;
	
	СвойствоАЗС = ВосстановитьЗначение("СвойствоАЗС");
	Если СвойствоАЗС = Неопределено Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("СвойствоАЗС") Тогда
			СвойствоАЗС = СтруктураНастроекПоУмолчанию["СвойствоАЗС"]; 	
		КонецЕсли;
	Иначе
		СвойствоАЗС = ВосстановитьЗначение("СвойствоАЗС")
	КонецЕсли;
	
	СвойствоАЗК = ВосстановитьЗначение("СвойствоАЗК");
	Если СвойствоАЗК = Неопределено Тогда
		Если СтруктураНастроекПоУмолчанию.Свойство("СвойствоАЗК") Тогда
			СвойствоАЗК = СтруктураНастроекПоУмолчанию["СвойствоАЗК"]; 	
		КонецЕсли;
	Иначе
		СвойствоАЗК = ВосстановитьЗначение("СвойствоАЗК")
	КонецЕсли;	
	
	//Токен = ВосстановитьЗначение("Токен");
	//Если Токен = Неопределено ИЛИ Токен = "" Тогда
	//	Если СтруктураНастроекПоУмолчанию.Свойство("Токен") Тогда
			Токен = СтруктураНастроекПоУмолчанию["Токен"]; 	
	//	КонецЕсли;
	//Иначе
	//	Токен = ВосстановитьЗначение("Токен")
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения() Экспорт
	
	Если Не ПанельНастроекНарисована И Не Модифицированность тогда
		
		// Инициализация компоновщиков настроек и, если необходимо, загрузка настроек по умолчанию
		ЗагружатьНастройкиПоУмолчанию = Не РежимРедактированияНастройки И Не ЭтоОтработкаРасшифровки И СохраненнаяНастройка.Пустая();
		Схема = ТиповыеОтчеты.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, , ЗагружатьНастройкиПоУмолчанию);
		КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		
		Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки тогда
			ПрименитьНастройку();
			ТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ЭтотОбъект);
			ТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ЭтотОбъект, ЭтаФорма);
		Иначе
			// Отработаем изменение отображение панели настроек
			ТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
			ТиповыеОтчеты.ПерерисоватьПанельНастроек(ЭтотОбъект, ЭтаФорма, );
			
		КонецЕсли;
		
		ПанельНастроекНарисована = Истина;
		
	КонецЕсли;
	
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ТиповыеОтчеты.ОбработкаВыбораФормыОтчета(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора, Источник);
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ТиповыеОтчеты.ОбработкаРасшифровкиТиповогоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма,);
		
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если РежимРедактированияНастройки тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТиповыеОтчеты.ОбработкаЗакрытияНастройкиОтчета(ЭтотОбъект, ЭтаФорма, Отказ, СтандартнаяОбработка);
	Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки тогда
		ТиповыеОтчеты.СохранитьПоследнююИспользуемуюНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ НА ПАНЕЛИ

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОбработкаНажатияКнопкиСохраненнойНастройки(Элемент)
	
	ТиповыеОтчеты.ВыборВариантаОтчетаНаПанелиВариантов(ЭтотОбъект, ЭтаФорма, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСохранитьСписок(Элемент)
	
	ТиповыеОтчеты.СохранитьСписокВТабличномПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиЗагрузитьСписок(Элемент)
	
	ТиповыеОтчеты.ЗагрузитьСписокВТабличноеПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСтандартныйПериодПользователяПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = ?(Элемент.Значение = Неопределено, ВариантСтандартногоПериода.ПроизвольныйПериод, Элемент.Значение);
	
КонецПроцедуры

Процедура ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении(Элемент)
	
	СтандартнаяДатаНачала.Вариант = ?(Элемент.Значение = Неопределено, ВариантСтандартнойДатыНачала.ПроизвольнаяДата, Элемент.Значение);
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартногоПериодаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартнаяДатаНачалаПользователя.Значение = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
	
КонецПроцедуры

Процедура ДействияПанелиИзменениеЗначенияДинамическогоОтбора(Элемент)
	
	ТиповыеОтчеты.ОбработкаИзмененияЗначенияДинамическогоОтбора(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиОкончаниеРедактированиеТабличногоПоля(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиУдалениеСтрокиТабличногоПоля(Элемент)
	
	ТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры
                                                              
Процедура ДействияПанелиКнопкаПодборНажатие(Элемент)
	
	ТиповыеОтчеты.ОбработкаНажатияКнопкиПодбор(ЭтотОбъект, ЭтаФорма, Элемент);
	
КонецПроцедуры


Процедура ПриНажатииНаКнопкуВверх(Кнопка)
	
	Типовыеотчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуВниз(Кнопка)
	
	Типовыеотчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ТиповыеОтчеты.СохранитьНастройкиФормыОтчета(ОтчетОбъект, ЭтаФорма);
	
	СохранитьЗначение("АдресТелематическогоСервера", 			АдресТелематическогоСервера);
	СохранитьЗначение("ПортТелематическогоСервера", 			ПортТелематическогоСервера);
	СохранитьЗначение("ЧасовойПояс", 			ЧасовойПояс);
	СохранитьЗначение("Логин", 			Логин);
	СохранитьЗначение("Пароль", 			Пароль);
	СохранитьЗначение("ИмяОтчетаДляПолученияДанных", 			ИмяОтчетаДляПолученияДанных); 
	СохранитьЗначение("ИдОтчетаДляПолученияДанных", 			ИдОтчетаДляПолученияДанных); 
	СохранитьЗначение("ИдШаблонаДляПолученияДанных", 			ИдШаблонаДляПолученияДанных); 
	СохранитьЗначение("ИдШаблонаДляЗаправок", 			ИдШаблонаДляЗаправок);  	
	СохранитьЗначение("ХранениеИдТехники", 			ХранениеИдТехники); 
	СохранитьЗначение("СвойствоАЗС", 			СвойствоАЗС); 
	СохранитьЗначение("СвойствоАЗК", 			СвойствоАЗК); 
	СохранитьЗначение("Токен", 			Токен); 
	
КонецПроцедуры

Процедура ГруппировкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ТиповыеОтчеты.ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанель1Настройка(Кнопка)
	
	Форма = ПолучитьФорму("Настройка", ЭтаФорма);
	Форма.АдресТелематическогоСервера = АдресТелематическогоСервера;
	Форма.ПортТелематическогоСервера = ПортТелематическогоСервера;      
	Форма.ЧасовойПояс = ЧасовойПояс;      
	Форма.Логин = Логин;      
	Форма.Пароль = Пароль;      
	Форма.ИмяОтчетаДляПолученияДанных = ИмяОтчетаДляПолученияДанных;
	Форма.ИдШаблонаДляПолученияДанных = ИдШаблонаДляПолученияДанных;
	Форма.ИдШаблонаДляЗаправок = ИдШаблонаДляЗаправок;
	Форма.ИдОтчетаДляПолученияДанных = ИдОтчетаДляПолученияДанных;
	Форма.ХранениеИдТехники = ХранениеИдТехники;
	Форма.СвойствоАЗС = СвойствоАЗС;
	Форма.СвойствоАЗК = СвойствоАЗК;
	Форма.Токен = Токен;
	
	Сформировать = Форма.ОткрытьМодально(); 	
	Если Сформировать <> Неопределено Тогда
		Если Сформировать Тогда
			ОбновитьОтчет();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры


ПанельНастроекНарисована = Ложь;

СоответствиеНастройкаРезультат = Новый Соответствие;

ДействияЭлементовФормы = Новый Структура;
ДействияЭлементовФормы.Вставить("ОбработкаНажатияКнопкиСохраненнойНастройки", Новый Действие("ОбработкаНажатияКнопкиСохраненнойНастройки"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСохранитьСписок", Новый Действие("ДействияПанелиСохранитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиЗагрузитьСписок", Новый Действие("ДействияПанелиЗагрузитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартныйПериодПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартныйПериодПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартногоПериодаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартногоПериодаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиИзменениеЗначенияДинамическогоОтбора", Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора"));
ДействияЭлементовФормы.Вставить("ДействияПанелиОкончаниеРедактированиеТабличногоПоля", Новый Действие("ДействияПанелиОкончаниеРедактированиеТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиУдалениеСтрокиТабличногоПоля", Новый Действие("ДействияПанелиУдалениеСтрокиТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиКнопкаПодборНажатие", Новый Действие("ДействияПанелиКнопкаПодборНажатие"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВверх", Новый Действие("ПриНажатииНаКнопкуВверх"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВниз", Новый Действие("ПриНажатииНаКнопкуВниз"));
ДействияЭлементовФормы.Вставить("ГруппировкиПриПолученииДанных", Новый Действие("ГруппировкиПриПолученииДанных"));
